
Alternative 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000876  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  00800110  00800110  0000091a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c4  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bae  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b9  00000000  00000000  000029c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000627  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d39  00000000  00000000  00003a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e7       	ldi	r30, 0x76	; 118
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 31       	cpi	r26, 0x10	; 16
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a0 e1       	ldi	r26, 0x10	; 16
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a6 33       	cpi	r26, 0x36	; 54
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  92:	0c 94 39 04 	jmp	0x872	; 0x872 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <button>:
		//}
	}
}

void init_button() {
	PORTB = (1<<PB7);
  9a:	f1 2c       	mov	r15, r1
  9c:	0d ee       	ldi	r16, 0xED	; 237
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	cc ee       	ldi	r28, 0xEC	; 236
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	68 94       	set
  a6:	bb 24       	eor	r11, r11
  a8:	b2 f8       	bld	r11, 2
  aa:	c1 2c       	mov	r12, r1
  ac:	68 94       	set
  ae:	dd 24       	eor	r13, r13
  b0:	d1 f8       	bld	r13, 1
  b2:	ee 24       	eor	r14, r14
  b4:	e3 94       	inc	r14
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lock>
  be:	f1 10       	cpse	r15, r1
  c0:	09 c0       	rjmp	.+18     	; 0xd4 <button+0x3a>
  c2:	f8 01       	movw	r30, r16
  c4:	80 81       	ld	r24, Z
  c6:	8d 25       	eor	r24, r13
  c8:	80 83       	st	Z, r24
  ca:	88 81       	ld	r24, Y
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	88 83       	st	Y, r24
  d0:	fe 2c       	mov	r15, r14
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <button+0x1c>
  d4:	f8 01       	movw	r30, r16
  d6:	80 81       	ld	r24, Z
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 83       	st	Z, r24
  dc:	88 81       	ld	r24, Y
  de:	8b 25       	eor	r24, r11
  e0:	88 83       	st	Y, r24
  e2:	fc 2c       	mov	r15, r12
  e4:	e8 cf       	rjmp	.-48     	; 0xb6 <button+0x1c>

000000e6 <blink>:
  e6:	cf ee       	ldi	r28, 0xEF	; 239
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lock>
  f4:	88 81       	ld	r24, Y
  f6:	81 27       	eor	r24, r17
  f8:	88 83       	st	Y, r24
  fa:	0e 94 b4 03 	call	0x768	; 0x768 <resetMilliseconds>
  fe:	f6 cf       	rjmp	.-20     	; 0xec <blink+0x6>

00000100 <init_lcd>:
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 106:	87 eb       	ldi	r24, 0xB7	; 183
 108:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 118:	08 95       	ret

0000011a <digitLookUp>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	64 97       	sbiw	r28, 0x14	; 20
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	90 ed       	ldi	r25, 0xD0	; 208
 130:	98 0f       	add	r25, r24
 132:	9a 30       	cpi	r25, 0x0A	; 10
 134:	90 f5       	brcc	.+100    	; 0x19a <digitLookUp+0x80>
 136:	21 e5       	ldi	r18, 0x51	; 81
 138:	35 e1       	ldi	r19, 0x15	; 21
 13a:	3a 83       	std	Y+2, r19	; 0x02
 13c:	29 83       	std	Y+1, r18	; 0x01
 13e:	20 e1       	ldi	r18, 0x10	; 16
 140:	31 e0       	ldi	r19, 0x01	; 1
 142:	3c 83       	std	Y+4, r19	; 0x04
 144:	2b 83       	std	Y+3, r18	; 0x03
 146:	21 ee       	ldi	r18, 0xE1	; 225
 148:	31 e1       	ldi	r19, 0x11	; 17
 14a:	3e 83       	std	Y+6, r19	; 0x06
 14c:	2d 83       	std	Y+5, r18	; 0x05
 14e:	21 eb       	ldi	r18, 0xB1	; 177
 150:	31 e1       	ldi	r19, 0x11	; 17
 152:	38 87       	std	Y+8, r19	; 0x08
 154:	2f 83       	std	Y+7, r18	; 0x07
 156:	20 eb       	ldi	r18, 0xB0	; 176
 158:	35 e0       	ldi	r19, 0x05	; 5
 15a:	3a 87       	std	Y+10, r19	; 0x0a
 15c:	29 87       	std	Y+9, r18	; 0x09
 15e:	21 eb       	ldi	r18, 0xB1	; 177
 160:	34 e1       	ldi	r19, 0x14	; 20
 162:	3c 87       	std	Y+12, r19	; 0x0c
 164:	2b 87       	std	Y+11, r18	; 0x0b
 166:	21 ef       	ldi	r18, 0xF1	; 241
 168:	34 e1       	ldi	r19, 0x14	; 20
 16a:	3e 87       	std	Y+14, r19	; 0x0e
 16c:	2d 87       	std	Y+13, r18	; 0x0d
 16e:	20 e1       	ldi	r18, 0x10	; 16
 170:	31 e1       	ldi	r19, 0x11	; 17
 172:	38 8b       	std	Y+16, r19	; 0x10
 174:	2f 87       	std	Y+15, r18	; 0x0f
 176:	21 ef       	ldi	r18, 0xF1	; 241
 178:	35 e1       	ldi	r19, 0x15	; 21
 17a:	3a 8b       	std	Y+18, r19	; 0x12
 17c:	29 8b       	std	Y+17, r18	; 0x11
 17e:	20 eb       	ldi	r18, 0xB0	; 176
 180:	35 e1       	ldi	r19, 0x15	; 21
 182:	3c 8b       	std	Y+20, r19	; 0x14
 184:	2b 8b       	std	Y+19, r18	; 0x13
 186:	e8 2f       	mov	r30, r24
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	f0 97       	sbiw	r30, 0x30	; 48
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	92 81       	ldd	r25, Z+2	; 0x02
 198:	02 c0       	rjmp	.+4      	; 0x19e <digitLookUp+0x84>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	64 96       	adiw	r28, 0x14	; 20
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <writeChar>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	eb 01       	movw	r28, r22
 1b6:	66 30       	cpi	r22, 0x06	; 6
 1b8:	71 05       	cpc	r23, r1
 1ba:	d8 f5       	brcc	.+118    	; 0x232 <writeChar+0x82>
 1bc:	0e 94 8d 00 	call	0x11a	; 0x11a <digitLookUp>
 1c0:	fe 01       	movw	r30, r28
 1c2:	f5 95       	asr	r31
 1c4:	e7 95       	ror	r30
 1c6:	c0 fd       	sbrc	r28, 0
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <writeChar+0x3c>
 1ca:	59 2f       	mov	r21, r25
 1cc:	52 95       	swap	r21
 1ce:	5f 70       	andi	r21, 0x0F	; 15
 1d0:	49 2f       	mov	r20, r25
 1d2:	4f 70       	andi	r20, 0x0F	; 15
 1d4:	9c 01       	movw	r18, r24
 1d6:	32 95       	swap	r19
 1d8:	22 95       	swap	r18
 1da:	2f 70       	andi	r18, 0x0F	; 15
 1dc:	23 27       	eor	r18, r19
 1de:	3f 70       	andi	r19, 0x0F	; 15
 1e0:	23 27       	eor	r18, r19
 1e2:	32 2f       	mov	r19, r18
 1e4:	3f 70       	andi	r19, 0x0F	; 15
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	90 ef       	ldi	r25, 0xF0	; 240
 1ea:	10 c0       	rjmp	.+32     	; 0x20c <writeChar+0x5c>
 1ec:	59 2f       	mov	r21, r25
 1ee:	50 7f       	andi	r21, 0xF0	; 240
 1f0:	9c 01       	movw	r18, r24
 1f2:	32 95       	swap	r19
 1f4:	22 95       	swap	r18
 1f6:	2f 70       	andi	r18, 0x0F	; 15
 1f8:	23 27       	eor	r18, r19
 1fa:	3f 70       	andi	r19, 0x0F	; 15
 1fc:	23 27       	eor	r18, r19
 1fe:	42 2f       	mov	r20, r18
 200:	40 7f       	andi	r20, 0xF0	; 240
 202:	38 2f       	mov	r19, r24
 204:	30 7f       	andi	r19, 0xF0	; 240
 206:	82 95       	swap	r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	9f e0       	ldi	r25, 0x0F	; 15
 20c:	ff 27       	eor	r31, r31
 20e:	e4 51       	subi	r30, 0x14	; 20
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	20 81       	ld	r18, Z
 214:	29 23       	and	r18, r25
 216:	25 2b       	or	r18, r21
 218:	20 83       	st	Z, r18
 21a:	25 81       	ldd	r18, Z+5	; 0x05
 21c:	29 23       	and	r18, r25
 21e:	24 2b       	or	r18, r20
 220:	25 83       	std	Z+5, r18	; 0x05
 222:	22 85       	ldd	r18, Z+10	; 0x0a
 224:	29 23       	and	r18, r25
 226:	23 2b       	or	r18, r19
 228:	22 87       	std	Z+10, r18	; 0x0a
 22a:	27 85       	ldd	r18, Z+15	; 0x0f
 22c:	92 23       	and	r25, r18
 22e:	89 2b       	or	r24, r25
 230:	87 87       	std	Z+15, r24	; 0x0f
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <is_prime>:
 238:	4f 92       	push	r4
 23a:	5f 92       	push	r5
 23c:	6f 92       	push	r6
 23e:	7f 92       	push	r7
 240:	8f 92       	push	r8
 242:	9f 92       	push	r9
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	2b 01       	movw	r4, r22
 25a:	3c 01       	movw	r6, r24
 25c:	99 23       	and	r25, r25
 25e:	2c f4       	brge	.+10     	; 0x26a <is_prime+0x32>
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	42 1a       	sub	r4, r18
 264:	52 0a       	sbc	r5, r18
 266:	62 0a       	sbc	r6, r18
 268:	72 0a       	sbc	r7, r18
 26a:	75 94       	asr	r7
 26c:	67 94       	ror	r6
 26e:	57 94       	ror	r5
 270:	47 94       	ror	r4
 272:	53 01       	movw	r10, r6
 274:	42 01       	movw	r8, r4
 276:	22 e0       	ldi	r18, 0x02	; 2
 278:	42 16       	cp	r4, r18
 27a:	51 04       	cpc	r5, r1
 27c:	61 04       	cpc	r6, r1
 27e:	71 04       	cpc	r7, r1
 280:	18 f1       	brcs	.+70     	; 0x2c8 <is_prime+0x90>
 282:	c6 2f       	mov	r28, r22
 284:	d7 2f       	mov	r29, r23
 286:	18 2f       	mov	r17, r24
 288:	09 2f       	mov	r16, r25
 28a:	60 ff       	sbrs	r22, 0
 28c:	2f c0       	rjmp	.+94     	; 0x2ec <is_prime+0xb4>
 28e:	c1 2c       	mov	r12, r1
 290:	d1 2c       	mov	r13, r1
 292:	76 01       	movw	r14, r12
 294:	68 94       	set
 296:	c1 f8       	bld	r12, 1
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <is_prime+0x7a>
 29a:	6c 2f       	mov	r22, r28
 29c:	7d 2f       	mov	r23, r29
 29e:	81 2f       	mov	r24, r17
 2a0:	90 2f       	mov	r25, r16
 2a2:	a7 01       	movw	r20, r14
 2a4:	96 01       	movw	r18, r12
 2a6:	0e 94 b7 03 	call	0x76e	; 0x76e <__udivmodsi4>
 2aa:	67 2b       	or	r22, r23
 2ac:	68 2b       	or	r22, r24
 2ae:	69 2b       	or	r22, r25
 2b0:	f9 f0       	breq	.+62     	; 0x2f0 <is_prime+0xb8>
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	c8 1a       	sub	r12, r24
 2b6:	d8 0a       	sbc	r13, r24
 2b8:	e8 0a       	sbc	r14, r24
 2ba:	f8 0a       	sbc	r15, r24
 2bc:	8c 14       	cp	r8, r12
 2be:	9d 04       	cpc	r9, r13
 2c0:	ae 04       	cpc	r10, r14
 2c2:	bf 04       	cpc	r11, r15
 2c4:	50 f7       	brcc	.-44     	; 0x29a <is_prime+0x62>
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <is_prime+0x9a>
 2c8:	c1 2c       	mov	r12, r1
 2ca:	d1 2c       	mov	r13, r1
 2cc:	76 01       	movw	r14, r12
 2ce:	68 94       	set
 2d0:	c1 f8       	bld	r12, 1
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	42 1a       	sub	r4, r18
 2d6:	52 0a       	sbc	r5, r18
 2d8:	62 0a       	sbc	r6, r18
 2da:	72 0a       	sbc	r7, r18
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	c4 14       	cp	r12, r4
 2e0:	d5 04       	cpc	r13, r5
 2e2:	e6 04       	cpc	r14, r6
 2e4:	f7 04       	cpc	r15, r7
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <is_prime+0xba>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <is_prime+0xba>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <is_prime+0xba>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	bf 90       	pop	r11
 304:	af 90       	pop	r10
 306:	9f 90       	pop	r9
 308:	8f 90       	pop	r8
 30a:	7f 90       	pop	r7
 30c:	6f 90       	pop	r6
 30e:	5f 90       	pop	r5
 310:	4f 90       	pop	r4
 312:	08 95       	ret

00000314 <printAt>:
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <printAt+0x12>
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	8a 01       	movw	r16, r20
 330:	24 e6       	ldi	r18, 0x64	; 100
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divmodsi4>
 33c:	2a e0       	ldi	r18, 0x0A	; 10
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divmodsi4>
 348:	b8 01       	movw	r22, r16
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	82 0f       	add	r24, r18
 34e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <writeChar>
 352:	1a 82       	std	Y+2, r1	; 0x02
 354:	19 82       	std	Y+1, r1	; 0x01
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	88 3e       	cpi	r24, 0xE8	; 232
 35c:	93 40       	sbci	r25, 0x03	; 3
 35e:	54 f4       	brge	.+20     	; 0x374 <printAt+0x60>
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	88 3e       	cpi	r24, 0xE8	; 232
 370:	93 40       	sbci	r25, 0x03	; 3
 372:	b4 f3       	brlt	.-20     	; 0x360 <printAt+0x4c>
 374:	0f 5f       	subi	r16, 0xFF	; 255
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	2a e0       	ldi	r18, 0x0A	; 10
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divmodsi4>
 388:	86 2f       	mov	r24, r22
 38a:	b8 01       	movw	r22, r16
 38c:	80 5d       	subi	r24, 0xD0	; 208
 38e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <writeChar>
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	df 90       	pop	r13
 3a4:	cf 90       	pop	r12
 3a6:	08 95       	ret

000003a8 <computePrimes>:
 3a8:	ec 01       	movw	r28, r24
 3aa:	c1 2c       	mov	r12, r1
 3ac:	d1 2c       	mov	r13, r1
 3ae:	76 01       	movw	r14, r12
 3b0:	c3 94       	inc	r12
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lock>
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	0e 94 1c 01 	call	0x238	; 0x238 <is_prime>
 3c2:	88 23       	and	r24, r24
 3c4:	29 f0       	breq	.+10     	; 0x3d0 <computePrimes+0x28>
 3c6:	ae 01       	movw	r20, r28
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	0e 94 8a 01 	call	0x314	; 0x314 <printAt>
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	c8 1a       	sub	r12, r24
 3d4:	d8 0a       	sbc	r13, r24
 3d6:	e8 0a       	sbc	r14, r24
 3d8:	f8 0a       	sbc	r15, r24
 3da:	eb cf       	rjmp	.-42     	; 0x3b2 <computePrimes+0xa>

000003dc <__vector_7>:
	}
	}
}

// Yield when timer interrupts
ISR(TIMER1_COMPA_vect) {
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	unlock(&blinkMutex);
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 82 03 	call	0x704	; 0x704 <unlock>
	yield();
 406:	0e 94 2a 03 	call	0x654	; 0x654 <yield>
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_3>:

ISR(PCINT1_vect) {
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
		unlock(&buttonMutex);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 82 03 	call	0x704	; 0x704 <unlock>
	yield();
 456:	0e 94 2a 03 	call	0x654	; 0x654 <yield>
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <main>:

int main()
{
	init_lcd();
 47c:	0e 94 80 00 	call	0x100	; 0x100 <init_lcd>
		//}
	}
}

void init_button() {
	PORTB = (1<<PB7);
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	85 b9       	out	0x05, r24	; 5
int main()
{
	init_lcd();
	init_button();
	
	spawn(button, 0);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	8d e4       	ldi	r24, 0x4D	; 77
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spawn>
	spawn(blink, 0);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	83 e7       	ldi	r24, 0x73	; 115
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spawn>
	computePrimes(0);
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <computePrimes>

000004a4 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <dispatch+0x6>
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	9a 83       	std	Y+2, r25	; 0x02
 4b0:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 4b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current>
 4b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current+0x1>
 4ba:	06 96       	adiw	r24, 0x06	; 6
 4bc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <setjmp>
 4c0:	89 2b       	or	r24, r25
 4c2:	59 f4       	brne	.+22     	; 0x4da <dispatch+0x36>
        current = next;
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current+0x1>
 4cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current>
        longjmp(next->context,1);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	06 96       	adiw	r24, 0x06	; 6
 4d6:	0e 94 18 04 	call	0x830	; 0x830 <longjmp>
    }
}
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <spawn>:

void spawn(void (* function)(int), int arg) {
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <spawn+0x6>
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 4ee:	f8 94       	cli
    if (!initialized) initialize();
 4f0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 4f4:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 4f8:	23 2b       	or	r18, r19
 4fa:	81 f5       	brne	.+96     	; 0x55c <__stack+0x5d>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 4fc:	2f ee       	ldi	r18, 0xEF	; 239
 4fe:	31 e0       	ldi	r19, 0x01	; 1
 500:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <threads+0x5>
 504:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <threads+0x4>
 508:	2c e5       	ldi	r18, 0x5C	; 92
 50a:	32 e0       	ldi	r19, 0x02	; 2
 50c:	30 93 f4 01 	sts	0x01F4, r19	; 0x8001f4 <threads+0x72>
 510:	20 93 f3 01 	sts	0x01F3, r18	; 0x8001f3 <threads+0x71>
 514:	29 ec       	ldi	r18, 0xC9	; 201
 516:	32 e0       	ldi	r19, 0x02	; 2
 518:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <threads+0xdf>
 51c:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 520:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <threads+0x14c>
 524:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <threads+0x14b>

	//PORTB = (1<<PB7);
	// Pin Change Enable Mask (PCINT15)
	PCMSK1 = (1<<PCINT15);
 528:	20 e8       	ldi	r18, 0x80	; 128
 52a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1);
 52e:	2d bb       	out	0x1d, r18	; 29
	// Timer 1 with 1024 prescaler with CTC (WGM13, WGM12)
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
 530:	2d e0       	ldi	r18, 0x0D	; 13
 532:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 * 7812,5 / 1000 * 50 = 390,625
	 * 391 = 50 ms
	 * 391 = 0b110000111
	 */
	// Set Timer1 Output Compare A
	TIMSK1 = (1<<OCIE1A);
 536:	22 e0       	ldi	r18, 0x02	; 2
 538:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// Set Output Compare Register 1 A to 391 in binary
	//OCR1A = 0b110000111;
	//OCR1A = 391; // Decimals works too!
	//OCR1A = 7812;
	OCR1A = 3906;
 53c:	22 e4       	ldi	r18, 0x42	; 66
 53e:	3f e0       	ldi	r19, 0x0F	; 15
 540:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 544:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Start the timer on value 0
	TCNT1 = 0;
 548:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 54c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    initialized = 1;
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 558:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
		*queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 55c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <freeQ>
 560:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <freeQ+0x1>
 564:	3a 83       	std	Y+2, r19	; 0x02
 566:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 568:	23 2b       	or	r18, r19
 56a:	a9 f0       	breq	.+42     	; 0x596 <__stack+0x97>
        *queue = (*queue)->next;
 56c:	e9 81       	ldd	r30, Y+1	; 0x01
 56e:	fa 81       	ldd	r31, Y+2	; 0x02
 570:	44 81       	ldd	r20, Z+4	; 0x04
 572:	55 81       	ldd	r21, Z+5	; 0x05
 574:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <freeQ+0x1>
 578:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 57c:	91 83       	std	Z+1, r25	; 0x01
 57e:	80 83       	st	Z, r24
    newp->arg = arg;
 580:	73 83       	std	Z+3, r23	; 0x03
 582:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 584:	15 82       	std	Z+5, r1	; 0x05
 586:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 588:	cf 01       	movw	r24, r30
 58a:	06 96       	adiw	r24, 0x06	; 6
 58c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <setjmp>
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	c1 f5       	brne	.+112    	; 0x604 <__stack+0x105>
 594:	01 c0       	rjmp	.+2      	; 0x598 <__stack+0x99>
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stack+0x97>
	    ENABLE();
 598:	78 94       	sei
	    current->function(current->arg);
 59a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <current>
 59e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <current+0x1>
 5a2:	ed 91       	ld	r30, X+
 5a4:	fc 91       	ld	r31, X
 5a6:	11 97       	sbiw	r26, 0x01	; 1
 5a8:	12 96       	adiw	r26, 0x02	; 2
 5aa:	8d 91       	ld	r24, X+
 5ac:	9c 91       	ld	r25, X
 5ae:	13 97       	sbiw	r26, 0x03	; 3
 5b0:	09 95       	icall
	    DISABLE();
 5b2:	f8 94       	cli
	    enqueue(current, &freeQ);
 5b4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current>
 5b8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5bc:	15 82       	std	Z+5, r1	; 0x05
 5be:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 5c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <freeQ>
 5c4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <freeQ+0x1>
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <__stack+0xd7>
	    *queue = p;
 5cc:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <freeQ+0x1>
 5d0:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <freeQ>
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <__stack+0xe3>
	} else {
	    //thread q = *queue;
	    //while (q->next)
	    //q = q->next;
	    //q->next = p;
		p->next = *queue;
 5d6:	95 83       	std	Z+5, r25	; 0x05
 5d8:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 5da:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <freeQ+0x1>
 5de:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 5e6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
    if (*queue) {
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	51 f0       	breq	.+20     	; 0x602 <__stack+0x103>
        *queue = (*queue)->next;
 5ee:	fc 01       	movw	r30, r24
 5f0:	24 81       	ldd	r18, Z+4	; 0x04
 5f2:	35 81       	ldd	r19, Z+5	; 0x05
 5f4:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <readyQ+0x1>
 5f8:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <readyQ>
    if (setjmp(newp->context) == 1) {
	    ENABLE();
	    current->function(current->arg);
	    DISABLE();
	    enqueue(current, &freeQ);
	    dispatch(dequeue(&readyQ));
 5fc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <dispatch>
 600:	01 c0       	rjmp	.+2      	; 0x604 <__stack+0x105>
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stack+0x103>
    }
    SETSTACK(&newp->context, &newp->stack);
 604:	e9 81       	ldd	r30, Y+1	; 0x01
 606:	fa 81       	ldd	r31, Y+2	; 0x02
 608:	36 96       	adiw	r30, 0x06	; 6
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	9a 81       	ldd	r25, Y+2	; 0x02
 60e:	87 59       	subi	r24, 0x97	; 151
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	91 8b       	std	Z+17, r25	; 0x11
 614:	80 8b       	std	Z+16, r24	; 0x10
 616:	93 8b       	std	Z+19, r25	; 0x13
 618:	82 8b       	std	Z+18, r24	; 0x12

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 61a:	e9 81       	ldd	r30, Y+1	; 0x01
 61c:	fa 81       	ldd	r31, Y+2	; 0x02
 61e:	15 82       	std	Z+5, r1	; 0x05
 620:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 622:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 626:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	29 f4       	brne	.+10     	; 0x638 <__stack+0x139>
	    *queue = p;
 62e:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <readyQ+0x1>
 632:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <readyQ>
 636:	08 c0       	rjmp	.+16     	; 0x648 <__stack+0x149>
	} else {
	    //thread q = *queue;
	    //while (q->next)
	    //q = q->next;
	    //q->next = p;
		p->next = *queue;
 638:	e9 81       	ldd	r30, Y+1	; 0x01
 63a:	fa 81       	ldd	r31, Y+2	; 0x02
 63c:	95 83       	std	Z+5, r25	; 0x05
 63e:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 640:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <readyQ+0x1>
 644:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <readyQ>
	    dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 648:	78 94       	sei
}
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <yield>:

void yield(void) {
	// Put the current thread into the readyQ
	enqueue(current, &readyQ);
 654:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current>
 658:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 65c:	15 82       	std	Z+5, r1	; 0x05
 65e:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 660:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 664:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	29 f4       	brne	.+10     	; 0x676 <yield+0x22>
	    *queue = p;
 66c:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <readyQ+0x1>
 670:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <readyQ>
 674:	06 c0       	rjmp	.+12     	; 0x682 <yield+0x2e>
	} else {
	    //thread q = *queue;
	    //while (q->next)
	    //q = q->next;
	    //q->next = p;
		p->next = *queue;
 676:	95 83       	std	Z+5, r25	; 0x05
 678:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 67a:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <readyQ+0x1>
 67e:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <readyQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 682:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 686:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
    if (*queue) {
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	51 f0       	breq	.+20     	; 0x6a2 <yield+0x4e>
        *queue = (*queue)->next;
 68e:	fc 01       	movw	r30, r24
 690:	24 81       	ldd	r18, Z+4	; 0x04
 692:	35 81       	ldd	r19, Z+5	; 0x05
 694:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <readyQ+0x1>
 698:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <readyQ>

void yield(void) {
	// Put the current thread into the readyQ
	enqueue(current, &readyQ);
	// Start another thread from readyQ
	dispatch(dequeue(&readyQ));
 69c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <dispatch>
 6a0:	08 95       	ret
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <yield+0x4e>

000006a4 <lock>:
}

void lock(mutex *m) {
 6a4:	fc 01       	movw	r30, r24
	// If the mutex is not locked, then lock it
	if(m->locked == 0) {
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	89 2b       	or	r24, r25
 6ac:	29 f4       	brne	.+10     	; 0x6b8 <lock+0x14>
		m->locked = 1;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	91 83       	std	Z+1, r25	; 0x01
 6b4:	80 83       	st	Z, r24
 6b6:	08 95       	ret
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
 6b8:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <current>
 6bc:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 6c0:	15 96       	adiw	r26, 0x05	; 5
 6c2:	1c 92       	st	X, r1
 6c4:	1e 92       	st	-X, r1
 6c6:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 6c8:	82 81       	ldd	r24, Z+2	; 0x02
 6ca:	93 81       	ldd	r25, Z+3	; 0x03
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	19 f4       	brne	.+6      	; 0x6d6 <lock+0x32>
	    *queue = p;
 6d0:	b3 83       	std	Z+3, r27	; 0x03
 6d2:	a2 83       	std	Z+2, r26	; 0x02
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <lock+0x3e>
	} else {
	    //thread q = *queue;
	    //while (q->next)
	    //q = q->next;
	    //q->next = p;
		p->next = *queue;
 6d6:	15 96       	adiw	r26, 0x05	; 5
 6d8:	9c 93       	st	X, r25
 6da:	8e 93       	st	-X, r24
 6dc:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 6de:	b3 83       	std	Z+3, r27	; 0x03
 6e0:	a2 83       	std	Z+2, r26	; 0x02
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 6e6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
    if (*queue) {
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	51 f0       	breq	.+20     	; 0x702 <lock+0x5e>
        *queue = (*queue)->next;
 6ee:	fc 01       	movw	r30, r24
 6f0:	24 81       	ldd	r18, Z+4	; 0x04
 6f2:	35 81       	ldd	r19, Z+5	; 0x05
 6f4:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <readyQ+0x1>
 6f8:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <readyQ>
	if(m->locked == 0) {
		m->locked = 1;
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
		dispatch(dequeue(&readyQ));
 6fc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <dispatch>
 700:	08 95       	ret
 702:	ff cf       	rjmp	.-2      	; 0x702 <lock+0x5e>

00000704 <unlock>:
	}
}

void unlock(mutex *m) {
 704:	fc 01       	movw	r30, r24
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
 706:	82 81       	ldd	r24, Z+2	; 0x02
 708:	93 81       	ldd	r25, Z+3	; 0x03
 70a:	89 2b       	or	r24, r25
 70c:	51 f1       	breq	.+84     	; 0x762 <unlock+0x5e>
		enqueue(current, &readyQ);
 70e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <current>
 712:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 716:	15 96       	adiw	r26, 0x05	; 5
 718:	1c 92       	st	X, r1
 71a:	1e 92       	st	-X, r1
 71c:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 71e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <readyQ>
 722:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <readyQ+0x1>
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	29 f4       	brne	.+10     	; 0x734 <unlock+0x30>
	    *queue = p;
 72a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <readyQ+0x1>
 72e:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <readyQ>
 732:	08 c0       	rjmp	.+16     	; 0x744 <unlock+0x40>
	} else {
	    //thread q = *queue;
	    //while (q->next)
	    //q = q->next;
	    //q->next = p;
		p->next = *queue;
 734:	15 96       	adiw	r26, 0x05	; 5
 736:	9c 93       	st	X, r25
 738:	8e 93       	st	-X, r24
 73a:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 73c:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <readyQ+0x1>
 740:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <readyQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	51 f0       	breq	.+20     	; 0x760 <unlock+0x5c>
        *queue = (*queue)->next;
 74c:	dc 01       	movw	r26, r24
 74e:	14 96       	adiw	r26, 0x04	; 4
 750:	2d 91       	ld	r18, X+
 752:	3c 91       	ld	r19, X
 754:	15 97       	sbiw	r26, 0x05	; 5
 756:	33 83       	std	Z+3, r19	; 0x03
 758:	22 83       	std	Z+2, r18	; 0x02
void unlock(mutex *m) {
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
		enqueue(current, &readyQ);
		dispatch(dequeue(&m->waitQ));
 75a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <dispatch>
 75e:	08 95       	ret
 760:	ff cf       	rjmp	.-2      	; 0x760 <unlock+0x5c>
	// Otherwise unlock the mutex
	} else {
		m->locked = 0;
 762:	11 82       	std	Z+1, r1	; 0x01
 764:	10 82       	st	Z, r1
 766:	08 95       	ret

00000768 <resetMilliseconds>:
	}
}

void resetMilliseconds() {
	milliseconds = 0;
 768:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <milliseconds>
 76c:	08 95       	ret

0000076e <__udivmodsi4>:
 76e:	a1 e2       	ldi	r26, 0x21	; 33
 770:	1a 2e       	mov	r1, r26
 772:	aa 1b       	sub	r26, r26
 774:	bb 1b       	sub	r27, r27
 776:	fd 01       	movw	r30, r26
 778:	0d c0       	rjmp	.+26     	; 0x794 <__udivmodsi4_ep>

0000077a <__udivmodsi4_loop>:
 77a:	aa 1f       	adc	r26, r26
 77c:	bb 1f       	adc	r27, r27
 77e:	ee 1f       	adc	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	a2 17       	cp	r26, r18
 784:	b3 07       	cpc	r27, r19
 786:	e4 07       	cpc	r30, r20
 788:	f5 07       	cpc	r31, r21
 78a:	20 f0       	brcs	.+8      	; 0x794 <__udivmodsi4_ep>
 78c:	a2 1b       	sub	r26, r18
 78e:	b3 0b       	sbc	r27, r19
 790:	e4 0b       	sbc	r30, r20
 792:	f5 0b       	sbc	r31, r21

00000794 <__udivmodsi4_ep>:
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	1a 94       	dec	r1
 79e:	69 f7       	brne	.-38     	; 0x77a <__udivmodsi4_loop>
 7a0:	60 95       	com	r22
 7a2:	70 95       	com	r23
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	9b 01       	movw	r18, r22
 7aa:	ac 01       	movw	r20, r24
 7ac:	bd 01       	movw	r22, r26
 7ae:	cf 01       	movw	r24, r30
 7b0:	08 95       	ret

000007b2 <__divmodsi4>:
 7b2:	05 2e       	mov	r0, r21
 7b4:	97 fb       	bst	r25, 7
 7b6:	1e f4       	brtc	.+6      	; 0x7be <__divmodsi4+0xc>
 7b8:	00 94       	com	r0
 7ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__negsi2>
 7be:	57 fd       	sbrc	r21, 7
 7c0:	07 d0       	rcall	.+14     	; 0x7d0 <__divmodsi4_neg2>
 7c2:	0e 94 b7 03 	call	0x76e	; 0x76e <__udivmodsi4>
 7c6:	07 fc       	sbrc	r0, 7
 7c8:	03 d0       	rcall	.+6      	; 0x7d0 <__divmodsi4_neg2>
 7ca:	4e f4       	brtc	.+18     	; 0x7de <__divmodsi4_exit>
 7cc:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__negsi2>

000007d0 <__divmodsi4_neg2>:
 7d0:	50 95       	com	r21
 7d2:	40 95       	com	r20
 7d4:	30 95       	com	r19
 7d6:	21 95       	neg	r18
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	4f 4f       	sbci	r20, 0xFF	; 255
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255

000007de <__divmodsi4_exit>:
 7de:	08 95       	ret

000007e0 <__negsi2>:
 7e0:	90 95       	com	r25
 7e2:	80 95       	com	r24
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	08 95       	ret

000007f0 <setjmp>:
 7f0:	dc 01       	movw	r26, r24
 7f2:	2d 92       	st	X+, r2
 7f4:	3d 92       	st	X+, r3
 7f6:	4d 92       	st	X+, r4
 7f8:	5d 92       	st	X+, r5
 7fa:	6d 92       	st	X+, r6
 7fc:	7d 92       	st	X+, r7
 7fe:	8d 92       	st	X+, r8
 800:	9d 92       	st	X+, r9
 802:	ad 92       	st	X+, r10
 804:	bd 92       	st	X+, r11
 806:	cd 92       	st	X+, r12
 808:	dd 92       	st	X+, r13
 80a:	ed 92       	st	X+, r14
 80c:	fd 92       	st	X+, r15
 80e:	0d 93       	st	X+, r16
 810:	1d 93       	st	X+, r17
 812:	cd 93       	st	X+, r28
 814:	dd 93       	st	X+, r29
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	8d b7       	in	r24, 0x3d	; 61
 81c:	8d 93       	st	X+, r24
 81e:	8e b7       	in	r24, 0x3e	; 62
 820:	8d 93       	st	X+, r24
 822:	8f b7       	in	r24, 0x3f	; 63
 824:	8d 93       	st	X+, r24
 826:	ed 93       	st	X+, r30
 828:	fd 93       	st	X+, r31
 82a:	88 27       	eor	r24, r24
 82c:	99 27       	eor	r25, r25
 82e:	09 94       	ijmp

00000830 <longjmp>:
 830:	dc 01       	movw	r26, r24
 832:	cb 01       	movw	r24, r22
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	91 05       	cpc	r25, r1
 838:	81 1d       	adc	r24, r1
 83a:	2d 90       	ld	r2, X+
 83c:	3d 90       	ld	r3, X+
 83e:	4d 90       	ld	r4, X+
 840:	5d 90       	ld	r5, X+
 842:	6d 90       	ld	r6, X+
 844:	7d 90       	ld	r7, X+
 846:	8d 90       	ld	r8, X+
 848:	9d 90       	ld	r9, X+
 84a:	ad 90       	ld	r10, X+
 84c:	bd 90       	ld	r11, X+
 84e:	cd 90       	ld	r12, X+
 850:	dd 90       	ld	r13, X+
 852:	ed 90       	ld	r14, X+
 854:	fd 90       	ld	r15, X+
 856:	0d 91       	ld	r16, X+
 858:	1d 91       	ld	r17, X+
 85a:	cd 91       	ld	r28, X+
 85c:	dd 91       	ld	r29, X+
 85e:	ed 91       	ld	r30, X+
 860:	fd 91       	ld	r31, X+
 862:	0d 90       	ld	r0, X+
 864:	f8 94       	cli
 866:	fe bf       	out	0x3e, r31	; 62
 868:	0f be       	out	0x3f, r0	; 63
 86a:	ed bf       	out	0x3d, r30	; 61
 86c:	ed 91       	ld	r30, X+
 86e:	fd 91       	ld	r31, X+
 870:	09 94       	ijmp

00000872 <_exit>:
 872:	f8 94       	cli

00000874 <__stop_program>:
 874:	ff cf       	rjmp	.-2      	; 0x874 <__stop_program>
