
Alternative 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007bc  00000850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080010c  0080010c  0000085c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137b  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075e  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e19  00000000  00000000  000037f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec eb       	ldi	r30, 0xBC	; 188
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 30       	cpi	r26, 0x0C	; 12
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ac e0       	ldi	r26, 0x0C	; 12
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 33       	cpi	r26, 0x31	; 49
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  92:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:

void blink() {
	for(;;) {
		// Replace busy-wait with mutex
		//if(readMilliseconds() >= 20) {
			LCDDR3 = LCDDR3 ^ 0b00000001;
  9a:	cf ee       	ldi	r28, 0xEF	; 239
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	88 81       	ld	r24, Y
  a2:	81 27       	eor	r24, r17
  a4:	88 83       	st	Y, r24
			lock(&blinkMutex);
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 07 03 	call	0x60e	; 0x60e <lock>
		//}
	}
  ae:	f8 cf       	rjmp	.-16     	; 0xa0 <blink+0x6>

000000b0 <init_lcd>:
// Create global mutex variables that is locked from the beginning
mutex blinkMutex = {1,0}, buttonMutex = {1,0}, primeMutex = {1,0};

void init_lcd() {
	// LCD Enable (LCDEN) & Low Power Waveform (LCDAB)
	LCDCRA = (1<<LCDEN) | (1<<LCDAB) | (0<<LCDIF) | (0<<LCDIE) | (0<<LCDBL);
  b0:	80 ec       	ldi	r24, 0xC0	; 192
  b2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	// external asynchronous clock source (LCDCS), 1/3 bias (LCD2B), 1/4 duty (LCDMUX1:0), 25 segments enabled (LCDPM2:0)
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  b6:	87 eb       	ldi	r24, 0xB7	; 183
  b8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// prescaler setting N=16 (LCDPS2:0), clock divider setting D=8 (LCDCD2:0)
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	// drive time 300 microseconds (LCDDC2:0), contrast control voltage 3.35 V (LCDCC3:0)
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  c8:	08 95       	ret

000000ca <init_button>:

}

// Moved the initialization of button and timer
void init_button() {
	PORTB = (1<<PB7);
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	85 b9       	out	0x05, r24	; 5
	// Pin Change Enable Mask (PCINT15)
	PCMSK1 = (1<<PCINT15);
  ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1);
  d2:	8d bb       	out	0x1d, r24	; 29
  d4:	08 95       	ret

000000d6 <init_timer>:
}

void init_timer() {
	// Timer 1 with 1024 prescaler with CTC (WGM13, WGM12)
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 * 7812,5 / 1000 * 50 = 390,625
	 * 391 = 50 ms
	 * 391 = 0b110000111
	 */
	// Set Timer1 Output Compare A
	TIMSK1 = (1<<OCIE1A);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// Set Output Compare Register 1 A to 391 in binary
	//OCR1A = 0b110000111;

	// Blink 1 Hz
	OCR1A = 781;
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Start the timer on value 0
	TCNT1 = 0;
  ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f6:	08 95       	ret

000000f8 <digitLookUp>:
}

uint16_t digitLookUp(uint8_t c) {
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	64 97       	sbiw	r28, 0x14	; 20
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61

	if(c < 48 || c > 57) {
 10c:	90 ed       	ldi	r25, 0xD0	; 208
 10e:	98 0f       	add	r25, r24
 110:	9a 30       	cpi	r25, 0x0A	; 10
 112:	90 f5       	brcc	.+100    	; 0x178 <digitLookUp+0x80>
		return 0;
	}

	uint16_t binary[10];

	binary[0] = 0b0001010101010001; // 0
 114:	21 e5       	ldi	r18, 0x51	; 81
 116:	35 e1       	ldi	r19, 0x15	; 21
 118:	3a 83       	std	Y+2, r19	; 0x02
 11a:	29 83       	std	Y+1, r18	; 0x01
	binary[1] = 0b0000000100010000; // 1
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	3c 83       	std	Y+4, r19	; 0x04
 122:	2b 83       	std	Y+3, r18	; 0x03
	binary[2] = 0b0001000111100001; // 2
 124:	21 ee       	ldi	r18, 0xE1	; 225
 126:	31 e1       	ldi	r19, 0x11	; 17
 128:	3e 83       	std	Y+6, r19	; 0x06
 12a:	2d 83       	std	Y+5, r18	; 0x05
	binary[3] = 0b0001000110110001; // 3
 12c:	21 eb       	ldi	r18, 0xB1	; 177
 12e:	31 e1       	ldi	r19, 0x11	; 17
 130:	38 87       	std	Y+8, r19	; 0x08
 132:	2f 83       	std	Y+7, r18	; 0x07
	binary[4] = 0b0000010110110000; // 4
 134:	20 eb       	ldi	r18, 0xB0	; 176
 136:	35 e0       	ldi	r19, 0x05	; 5
 138:	3a 87       	std	Y+10, r19	; 0x0a
 13a:	29 87       	std	Y+9, r18	; 0x09
	binary[5] = 0b0001010010110001; // 5
 13c:	21 eb       	ldi	r18, 0xB1	; 177
 13e:	34 e1       	ldi	r19, 0x14	; 20
 140:	3c 87       	std	Y+12, r19	; 0x0c
 142:	2b 87       	std	Y+11, r18	; 0x0b
	binary[6] = 0b0001010011110001; // 6
 144:	21 ef       	ldi	r18, 0xF1	; 241
 146:	34 e1       	ldi	r19, 0x14	; 20
 148:	3e 87       	std	Y+14, r19	; 0x0e
 14a:	2d 87       	std	Y+13, r18	; 0x0d
	binary[7] = 0b0001000100010000; // 7
 14c:	20 e1       	ldi	r18, 0x10	; 16
 14e:	31 e1       	ldi	r19, 0x11	; 17
 150:	38 8b       	std	Y+16, r19	; 0x10
 152:	2f 87       	std	Y+15, r18	; 0x0f
	binary[8] = 0b0001010111110001; // 8
 154:	21 ef       	ldi	r18, 0xF1	; 241
 156:	35 e1       	ldi	r19, 0x15	; 21
 158:	3a 8b       	std	Y+18, r19	; 0x12
 15a:	29 8b       	std	Y+17, r18	; 0x11
	binary[9] = 0b0001010110110000; // 9
 15c:	20 eb       	ldi	r18, 0xB0	; 176
 15e:	35 e1       	ldi	r19, 0x15	; 21
 160:	3c 8b       	std	Y+20, r19	; 0x14
 162:	2b 8b       	std	Y+19, r18	; 0x13
	binary[10] = '\0';

	return binary[(c - 48)];
 164:	e8 2f       	mov	r30, r24
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	f0 97       	sbiw	r30, 0x30	; 48
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ec 0f       	add	r30, r28
 170:	fd 1f       	adc	r31, r29
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	92 81       	ldd	r25, Z+2	; 0x02
 176:	02 c0       	rjmp	.+4      	; 0x17c <digitLookUp+0x84>
}

uint16_t digitLookUp(uint8_t c) {

	if(c < 48 || c > 57) {
		return 0;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
	binary[8] = 0b0001010111110001; // 8
	binary[9] = 0b0001010110110000; // 9
	binary[10] = '\0';

	return binary[(c - 48)];
}
 17c:	64 96       	adiw	r28, 0x14	; 20
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <writeChar>:

void writeChar(char ch, int pos) {
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	eb 01       	movw	r28, r22
	// If pos is less than zero or greater than 5, do nothing
	if(pos < 0 || pos > 5) {
 194:	66 30       	cpi	r22, 0x06	; 6
 196:	71 05       	cpc	r23, r1
 198:	d8 f5       	brcc	.+118    	; 0x210 <writeChar+0x82>

	uint16_t digitBinary = 0;
	uint8_t nibble_0 = 0, nibble_1 = 0, nibble_2 = 0, nibble_3 = 0, oldValue = 0, mask = 0, increment = 0;

	// Fetch the value needed to display number "ch" in LCDDRx
	digitBinary = digitLookUp(ch);
 19a:	0e 94 7c 00 	call	0xf8	; 0xf8 <digitLookUp>

	// Bitshift 1 bit to get valid values for incrementing the pointer
	increment = pos >> 1;
 19e:	fe 01       	movw	r30, r28
 1a0:	f5 95       	asr	r31
 1a2:	e7 95       	ror	r30

	// Depending on if the value of pos is even or odd we adjust the nibbles
	// and mask correctly
	if((pos % 2) == 0) {
 1a4:	c0 fd       	sbrc	r28, 0
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <writeChar+0x3c>
		nibble_0 = 0b00001111 & (digitBinary >> 12);
 1a8:	59 2f       	mov	r21, r25
 1aa:	52 95       	swap	r21
 1ac:	5f 70       	andi	r21, 0x0F	; 15
		nibble_1 = 0b00001111 & (digitBinary >> 8);
 1ae:	49 2f       	mov	r20, r25
 1b0:	4f 70       	andi	r20, 0x0F	; 15
		nibble_2 = 0b00001111 & (digitBinary >> 4);
 1b2:	9c 01       	movw	r18, r24
 1b4:	32 95       	swap	r19
 1b6:	22 95       	swap	r18
 1b8:	2f 70       	andi	r18, 0x0F	; 15
 1ba:	23 27       	eor	r18, r19
 1bc:	3f 70       	andi	r19, 0x0F	; 15
 1be:	23 27       	eor	r18, r19
 1c0:	32 2f       	mov	r19, r18
 1c2:	3f 70       	andi	r19, 0x0F	; 15
		nibble_3 = 0b00001111 & digitBinary;
 1c4:	8f 70       	andi	r24, 0x0F	; 15
		// This mask is needed to preserve what is on the right side of
		// LCDDRx
		mask = 0b11110000;
 1c6:	90 ef       	ldi	r25, 0xF0	; 240
 1c8:	10 c0       	rjmp	.+32     	; 0x1ea <writeChar+0x5c>
		} else {
		nibble_0 = 0b11110000 & (digitBinary >> 8);
 1ca:	59 2f       	mov	r21, r25
 1cc:	50 7f       	andi	r21, 0xF0	; 240
		nibble_1 = 0b11110000 & (digitBinary >> 4);
 1ce:	9c 01       	movw	r18, r24
 1d0:	32 95       	swap	r19
 1d2:	22 95       	swap	r18
 1d4:	2f 70       	andi	r18, 0x0F	; 15
 1d6:	23 27       	eor	r18, r19
 1d8:	3f 70       	andi	r19, 0x0F	; 15
 1da:	23 27       	eor	r18, r19
 1dc:	42 2f       	mov	r20, r18
 1de:	40 7f       	andi	r20, 0xF0	; 240
		nibble_2 = 0b11110000 & digitBinary;
 1e0:	38 2f       	mov	r19, r24
 1e2:	30 7f       	andi	r19, 0xF0	; 240
		nibble_3 = 0b11110000 & (digitBinary << 4);
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
		// Mask needed to preserve what is on the left side of LCDDRx
		mask = 0b00001111;
 1e8:	9f e0       	ldi	r25, 0x0F	; 15
 1ea:	ff 27       	eor	r31, r31
	// Create a pointer and assign the memory address of LCDDR0
	// (is volatile really needed?)
	volatile uint8_t *LCDDRAddress = &LCDDR0;
	// Increment the pointers memory address with the value calculated earlier
	// This is needed to be able to use LCDDR0+x, LCDDR1+x, LCDDR2+x etc.
	LCDDRAddress = (LCDDRAddress + increment);
 1ec:	e4 51       	subi	r30, 0x14	; 20
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
	// Preserve the old value by using a mask
	oldValue = mask & *LCDDRAddress;
 1f0:	20 81       	ld	r18, Z
 1f2:	29 23       	and	r18, r25
	// Add the nibble using OR
	*LCDDRAddress = oldValue | nibble_0;
 1f4:	25 2b       	or	r18, r21
 1f6:	20 83       	st	Z, r18
	// Increase the memory address of the pointer with 5 to be able to
	// use LCDDRx+5
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1f8:	25 81       	ldd	r18, Z+5	; 0x05
 1fa:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_1;
 1fc:	24 2b       	or	r18, r20
 1fe:	25 83       	std	Z+5, r18	; 0x05
	// Increase with 5 to be able to use LCDDRx+10
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 200:	22 85       	ldd	r18, Z+10	; 0x0a
 202:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_2;
 204:	23 2b       	or	r18, r19
 206:	22 87       	std	Z+10, r18	; 0x0a
	// Increase with 5 to be able to use LCDDRx+15
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 208:	27 85       	ldd	r18, Z+15	; 0x0f
 20a:	92 23       	and	r25, r18
	*LCDDRAddress = oldValue | nibble_3;
 20c:	89 2b       	or	r24, r25
 20e:	87 87       	std	Z+15, r24	; 0x0f

}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <is_prime>:

bool is_prime(long i) {
 216:	4f 92       	push	r4
 218:	5f 92       	push	r5
 21a:	6f 92       	push	r6
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 236:	2b 01       	movw	r4, r22
 238:	3c 01       	movw	r6, r24
 23a:	99 23       	and	r25, r25
 23c:	2c f4       	brge	.+10     	; 0x248 <is_prime+0x32>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	42 1a       	sub	r4, r18
 242:	52 0a       	sbc	r5, r18
 244:	62 0a       	sbc	r6, r18
 246:	72 0a       	sbc	r7, r18
 248:	75 94       	asr	r7
 24a:	67 94       	ror	r6
 24c:	57 94       	ror	r5
 24e:	47 94       	ror	r4
 250:	53 01       	movw	r10, r6
 252:	42 01       	movw	r8, r4
 254:	22 e0       	ldi	r18, 0x02	; 2
 256:	42 16       	cp	r4, r18
 258:	51 04       	cpc	r5, r1
 25a:	61 04       	cpc	r6, r1
 25c:	71 04       	cpc	r7, r1
 25e:	18 f1       	brcs	.+70     	; 0x2a6 <is_prime+0x90>
		if(i%c == 0) {
 260:	c6 2f       	mov	r28, r22
 262:	d7 2f       	mov	r29, r23
 264:	18 2f       	mov	r17, r24
 266:	09 2f       	mov	r16, r25
 268:	60 ff       	sbrs	r22, 0
 26a:	2f c0       	rjmp	.+94     	; 0x2ca <is_prime+0xb4>
 26c:	c1 2c       	mov	r12, r1
 26e:	d1 2c       	mov	r13, r1
 270:	76 01       	movw	r14, r12
 272:	68 94       	set
 274:	c1 f8       	bld	r12, 1
 276:	0c c0       	rjmp	.+24     	; 0x290 <is_prime+0x7a>
 278:	6c 2f       	mov	r22, r28
 27a:	7d 2f       	mov	r23, r29
 27c:	81 2f       	mov	r24, r17
 27e:	90 2f       	mov	r25, r16
 280:	a7 01       	movw	r20, r14
 282:	96 01       	movw	r18, r12
 284:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodsi4>
 288:	67 2b       	or	r22, r23
 28a:	68 2b       	or	r22, r24
 28c:	69 2b       	or	r22, r25
 28e:	f9 f0       	breq	.+62     	; 0x2ce <is_prime+0xb8>
}

bool is_prime(long i) {
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	c8 1a       	sub	r12, r24
 294:	d8 0a       	sbc	r13, r24
 296:	e8 0a       	sbc	r14, r24
 298:	f8 0a       	sbc	r15, r24
 29a:	8c 14       	cp	r8, r12
 29c:	9d 04       	cpc	r9, r13
 29e:	ae 04       	cpc	r10, r14
 2a0:	bf 04       	cpc	r11, r15
 2a2:	50 f7       	brcc	.-44     	; 0x278 <is_prime+0x62>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <is_prime+0x9a>
 2a6:	c1 2c       	mov	r12, r1
 2a8:	d1 2c       	mov	r13, r1
 2aa:	76 01       	movw	r14, r12
 2ac:	68 94       	set
 2ae:	c1 f8       	bld	r12, 1
			// Return false as the value of i is not a prime number
			return false;
		}
	}

	if(c == i/2 + 1) {
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	42 1a       	sub	r4, r18
 2b4:	52 0a       	sbc	r5, r18
 2b6:	62 0a       	sbc	r6, r18
 2b8:	72 0a       	sbc	r7, r18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	c4 14       	cp	r12, r4
 2be:	d5 04       	cpc	r13, r5
 2c0:	e6 04       	cpc	r14, r6
 2c2:	f7 04       	cpc	r15, r7
 2c4:	29 f0       	breq	.+10     	; 0x2d0 <is_prime+0xba>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <is_prime+0xba>
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
		if(i%c == 0) {
			// Return false as the value of i is not a prime number
			return false;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <is_prime+0xba>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
		// Return true as "i" is a prime number
		return true;
	}

	return false;
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	bf 90       	pop	r11
 2e2:	af 90       	pop	r10
 2e4:	9f 90       	pop	r9
 2e6:	8f 90       	pop	r8
 2e8:	7f 90       	pop	r7
 2ea:	6f 90       	pop	r6
 2ec:	5f 90       	pop	r5
 2ee:	4f 90       	pop	r4
 2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	00 d0       	rcall	.+0      	; 0x304 <printAt+0x12>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
 30c:	8a 01       	movw	r16, r20
	// Use the global variable pp to test mutex
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 30e:	24 e6       	ldi	r18, 0x64	; 100
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__divmodsi4>
 31a:	2a e0       	ldi	r18, 0x0A	; 10
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__divmodsi4>
 326:	b8 01       	movw	r22, r16
 328:	80 e3       	ldi	r24, 0x30	; 48
 32a:	82 0f       	add	r24, r18
 32c:	0e 94 c7 00 	call	0x18e	; 0x18e <writeChar>
	for(volatile int i = 0; i < 1000; i++) {}
 330:	1a 82       	std	Y+2, r1	; 0x02
 332:	19 82       	std	Y+1, r1	; 0x01
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	88 3e       	cpi	r24, 0xE8	; 232
 33a:	93 40       	sbci	r25, 0x03	; 3
 33c:	54 f4       	brge	.+20     	; 0x352 <printAt+0x60>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	88 3e       	cpi	r24, 0xE8	; 232
 34e:	93 40       	sbci	r25, 0x03	; 3
 350:	b4 f3       	brlt	.-20     	; 0x33e <printAt+0x4c>
	pp++;
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
	writeChar( num % 10 + '0', pp);
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	2a e0       	ldi	r18, 0x0A	; 10
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__divmodsi4>
 366:	86 2f       	mov	r24, r22
 368:	b8 01       	movw	r22, r16
 36a:	80 5d       	subi	r24, 0xD0	; 208
 36c:	0e 94 c7 00 	call	0x18e	; 0x18e <writeChar>
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	08 95       	ret

00000386 <button>:
		//}
	}
}

void button() {
	uint16_t clicks = 0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
		//buttonNow = (PINB >> 7);
		// If the button state is 0 and the previous state was 1 then change latch state to true
		//if(buttonNow == 0 && buttonPrev == 1) {
		//}
		//buttonPrev = buttonNow;
		printAt(clicks, 3);
 38a:	be 01       	movw	r22, r28
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	43 e0       	ldi	r20, 0x03	; 3
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
		lock(&buttonMutex);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 07 03 	call	0x60e	; 0x60e <lock>
		clicks++;
 3a0:	21 96       	adiw	r28, 0x01	; 1
	}
 3a2:	f3 cf       	rjmp	.-26     	; 0x38a <button+0x4>

000003a4 <computePrimes>:
	for(volatile int i = 0; i < 1000; i++) {}
	pp++;
	writeChar( num % 10 + '0', pp);
}

void computePrimes(int pos) {
 3a4:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 3a6:	c1 2c       	mov	r12, r1
 3a8:	d1 2c       	mov	r13, r1
 3aa:	76 01       	movw	r14, r12
 3ac:	c3 94       	inc	r12
		if (is_prime(n)) {
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	0e 94 0b 01 	call	0x216	; 0x216 <is_prime>
 3b6:	88 23       	and	r24, r24
 3b8:	29 f0       	breq	.+10     	; 0x3c4 <computePrimes+0x20>
			printAt(n, pos);
 3ba:	ae 01       	movw	r20, r28
 3bc:	c7 01       	movw	r24, r14
 3be:	b6 01       	movw	r22, r12
 3c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	c8 1a       	sub	r12, r24
 3c8:	d8 0a       	sbc	r13, r24
 3ca:	e8 0a       	sbc	r14, r24
 3cc:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 3ce:	ef cf       	rjmp	.-34     	; 0x3ae <computePrimes+0xa>

000003d0 <__vector_3>:
		clicks++;
	}
}

// Unlock button mutex when interrupt occurs
ISR(PCINT1_vect) {
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	if((PINB >> 7) == 0) {
 3f2:	1f 99       	sbic	0x03, 7	; 3
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <__vector_3+0x2e>
		unlock(&buttonMutex);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 31 03 	call	0x662	; 0x662 <unlock>
	}
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_7>:

// Unlock Blink mutex when interrupt occurs
ISR(TIMER1_COMPA_vect) {
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	unlock(&blinkMutex);
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 31 03 	call	0x662	; 0x662 <unlock>
}
 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <main>:

int main() {
	// Setup the clockspeed
	CLKPR  = 0x80;
 46c:	e1 e6       	ldi	r30, 0x61	; 97
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 e8       	ldi	r24, 0x80	; 128
 472:	80 83       	st	Z, r24
	CLKPR  = 0x00;
 474:	10 82       	st	Z, r1
	init_lcd();
 476:	0e 94 58 00 	call	0xb0	; 0xb0 <init_lcd>
	init_button();
 47a:	0e 94 65 00 	call	0xca	; 0xca <init_button>
	init_timer();
 47e:	0e 94 6b 00 	call	0xd6	; 0xd6 <init_timer>

	spawn(button, 0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	83 ec       	ldi	r24, 0xC3	; 195
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <spawn>
	spawn(blink, 0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	8d e4       	ldi	r24, 0x4D	; 77
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 71 02 	call	0x4e2	; 0x4e2 <spawn>
	computePrimes(0);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <computePrimes>

000004a2 <dispatch>:
	DISABLE();
	// Put the current thread into the readyQ
	enqueue(current, &readyQ);
	// Start another thread from readyQ
	dispatch(dequeue(&readyQ));
	ENABLE();
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <dispatch+0x6>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	9a 83       	std	Y+2, r25	; 0x02
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 4b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 4b8:	06 96       	adiw	r24, 0x06	; 6
 4ba:	0e 94 9b 03 	call	0x736	; 0x736 <setjmp>
 4be:	89 2b       	or	r24, r25
 4c0:	59 f4       	brne	.+22     	; 0x4d8 <dispatch+0x36>
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current+0x1>
 4ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current>
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	06 96       	adiw	r24, 0x06	; 6
 4d4:	0e 94 bb 03 	call	0x776	; 0x776 <longjmp>
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <spawn>:
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <spawn+0x6>
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	f8 94       	cli
 4ee:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 4f2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 4f6:	23 2b       	or	r18, r19
 4f8:	e1 f4       	brne	.+56     	; 0x532 <__stack+0x33>
 4fa:	2a ee       	ldi	r18, 0xEA	; 234
 4fc:	31 e0       	ldi	r19, 0x01	; 1
 4fe:	30 93 82 01 	sts	0x0182, r19	; 0x800182 <threads+0x5>
 502:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <threads+0x4>
 506:	27 e5       	ldi	r18, 0x57	; 87
 508:	32 e0       	ldi	r19, 0x02	; 2
 50a:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <threads+0x72>
 50e:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <threads+0x71>
 512:	24 ec       	ldi	r18, 0xC4	; 196
 514:	32 e0       	ldi	r19, 0x02	; 2
 516:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <threads+0xdf>
 51a:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <threads+0xde>
 51e:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <threads+0x14c>
 522:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <threads+0x14b>
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 52e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
 532:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <freeQ>
 536:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <freeQ+0x1>
 53a:	3a 83       	std	Y+2, r19	; 0x02
 53c:	29 83       	std	Y+1, r18	; 0x01
 53e:	23 2b       	or	r18, r19
 540:	a9 f0       	breq	.+42     	; 0x56c <__stack+0x6d>
 542:	e9 81       	ldd	r30, Y+1	; 0x01
 544:	fa 81       	ldd	r31, Y+2	; 0x02
 546:	44 81       	ldd	r20, Z+4	; 0x04
 548:	55 81       	ldd	r21, Z+5	; 0x05
 54a:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <freeQ+0x1>
 54e:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <freeQ>
 552:	91 83       	std	Z+1, r25	; 0x01
 554:	80 83       	st	Z, r24
 556:	73 83       	std	Z+3, r23	; 0x03
 558:	62 83       	std	Z+2, r22	; 0x02
 55a:	15 82       	std	Z+5, r1	; 0x05
 55c:	14 82       	std	Z+4, r1	; 0x04
 55e:	cf 01       	movw	r24, r30
 560:	06 96       	adiw	r24, 0x06	; 6
 562:	0e 94 9b 03 	call	0x736	; 0x736 <setjmp>
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	79 f5       	brne	.+94     	; 0x5c8 <__stack+0xc9>
 56a:	01 c0       	rjmp	.+2      	; 0x56e <__stack+0x6f>
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stack+0x6d>
 56e:	78 94       	sei
 570:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 574:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
 578:	ed 91       	ld	r30, X+
 57a:	fc 91       	ld	r31, X
 57c:	11 97       	sbiw	r26, 0x01	; 1
 57e:	12 96       	adiw	r26, 0x02	; 2
 580:	8d 91       	ld	r24, X+
 582:	9c 91       	ld	r25, X
 584:	13 97       	sbiw	r26, 0x03	; 3
 586:	09 95       	icall
 588:	f8 94       	cli
 58a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
 58e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
 592:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <freeQ>
 596:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <freeQ+0x1>
 59a:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <freeQ+0x1>
 59e:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <freeQ>
 5a2:	95 83       	std	Z+5, r25	; 0x05
 5a4:	84 83       	std	Z+4, r24	; 0x04
 5a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 5aa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	51 f0       	breq	.+20     	; 0x5c6 <__stack+0xc7>
 5b2:	fc 01       	movw	r30, r24
 5b4:	24 81       	ldd	r18, Z+4	; 0x04
 5b6:	35 81       	ldd	r19, Z+5	; 0x05
 5b8:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 5bc:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
 5c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dispatch>
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <__stack+0xc9>
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stack+0xc7>
 5c8:	e9 81       	ldd	r30, Y+1	; 0x01
 5ca:	fa 81       	ldd	r31, Y+2	; 0x02
 5cc:	36 96       	adiw	r30, 0x06	; 6
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	87 59       	subi	r24, 0x97	; 151
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	91 8b       	std	Z+17, r25	; 0x11
 5d8:	80 8b       	std	Z+16, r24	; 0x10
 5da:	93 8b       	std	Z+19, r25	; 0x13
 5dc:	82 8b       	std	Z+18, r24	; 0x12
 5de:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
 5e2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
 5e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 5ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
 5ee:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 5f2:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
 5f6:	95 83       	std	Z+5, r25	; 0x05
 5f8:	84 83       	std	Z+4, r24	; 0x04
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	9a 81       	ldd	r25, Y+2	; 0x02
 5fe:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dispatch>
 602:	78 94       	sei
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <lock>:
}

void lock(mutex *m) {
 60e:	fc 01       	movw	r30, r24
	DISABLE();
 610:	f8 94       	cli
	// If the mutex is not locked, then lock it
	if(m->locked == 0) {
 612:	80 81       	ld	r24, Z
 614:	91 81       	ldd	r25, Z+1	; 0x01
 616:	89 2b       	or	r24, r25
 618:	29 f4       	brne	.+10     	; 0x624 <lock+0x16>
		m->locked = 1;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
 622:	1d c0       	rjmp	.+58     	; 0x65e <lock+0x50>
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
 624:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 628:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {

	thread q = *queue;
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	93 81       	ldd	r25, Z+3	; 0x03
	*queue = p;
 630:	b3 83       	std	Z+3, r27	; 0x03
 632:	a2 83       	std	Z+2, r26	; 0x02
	p->next = q;
 634:	15 96       	adiw	r26, 0x05	; 5
 636:	9c 93       	st	X, r25
 638:	8e 93       	st	-X, r24
 63a:	14 97       	sbiw	r26, 0x04	; 4
    }
	*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 63c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 640:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
    if (*queue) {
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	51 f0       	breq	.+20     	; 0x65c <lock+0x4e>
        *queue = (*queue)->next;
 648:	fc 01       	movw	r30, r24
 64a:	24 81       	ldd	r18, Z+4	; 0x04
 64c:	35 81       	ldd	r19, Z+5	; 0x05
 64e:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 652:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
	if(m->locked == 0) {
		m->locked = 1;
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
		dispatch(dequeue(&readyQ));
 656:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dispatch>
 65a:	01 c0       	rjmp	.+2      	; 0x65e <lock+0x50>
 65c:	ff cf       	rjmp	.-2      	; 0x65c <lock+0x4e>
	}
	ENABLE();
 65e:	78 94       	sei
 660:	08 95       	ret

00000662 <unlock>:
}

void unlock(mutex *m) {
 662:	fc 01       	movw	r30, r24
	DISABLE();
 664:	f8 94       	cli
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
 666:	82 81       	ldd	r24, Z+2	; 0x02
 668:	93 81       	ldd	r25, Z+3	; 0x03
 66a:	89 2b       	or	r24, r25
 66c:	f9 f0       	breq	.+62     	; 0x6ac <unlock+0x4a>
		enqueue(current, &readyQ);
 66e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 672:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {

	thread q = *queue;
 676:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 67a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
	*queue = p;
 67e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <readyQ+0x1>
 682:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <readyQ>
	p->next = q;
 686:	15 96       	adiw	r26, 0x05	; 5
 688:	9c 93       	st	X, r25
 68a:	8e 93       	st	-X, r24
 68c:	14 97       	sbiw	r26, 0x04	; 4
    }
	*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 68e:	82 81       	ldd	r24, Z+2	; 0x02
 690:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	51 f0       	breq	.+20     	; 0x6aa <unlock+0x48>
        *queue = (*queue)->next;
 696:	dc 01       	movw	r26, r24
 698:	14 96       	adiw	r26, 0x04	; 4
 69a:	2d 91       	ld	r18, X+
 69c:	3c 91       	ld	r19, X
 69e:	15 97       	sbiw	r26, 0x05	; 5
 6a0:	33 83       	std	Z+3, r19	; 0x03
 6a2:	22 83       	std	Z+2, r18	; 0x02
	DISABLE();
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
		enqueue(current, &readyQ);
		dispatch(dequeue(&m->waitQ));
 6a4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dispatch>
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <unlock+0x4e>
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <unlock+0x48>
	// Otherwise unlock the mutex
	} else {
		m->locked = 0;
 6ac:	11 82       	std	Z+1, r1	; 0x01
 6ae:	10 82       	st	Z, r1
	}
	ENABLE();
 6b0:	78 94       	sei
 6b2:	08 95       	ret

000006b4 <__udivmodsi4>:
 6b4:	a1 e2       	ldi	r26, 0x21	; 33
 6b6:	1a 2e       	mov	r1, r26
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	fd 01       	movw	r30, r26
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__udivmodsi4_ep>

000006c0 <__udivmodsi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	ee 1f       	adc	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	a2 17       	cp	r26, r18
 6ca:	b3 07       	cpc	r27, r19
 6cc:	e4 07       	cpc	r30, r20
 6ce:	f5 07       	cpc	r31, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__udivmodsi4_ep>
 6d2:	a2 1b       	sub	r26, r18
 6d4:	b3 0b       	sbc	r27, r19
 6d6:	e4 0b       	sbc	r30, r20
 6d8:	f5 0b       	sbc	r31, r21

000006da <__udivmodsi4_ep>:
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a 94       	dec	r1
 6e4:	69 f7       	brne	.-38     	; 0x6c0 <__udivmodsi4_loop>
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	bd 01       	movw	r22, r26
 6f4:	cf 01       	movw	r24, r30
 6f6:	08 95       	ret

000006f8 <__divmodsi4>:
 6f8:	05 2e       	mov	r0, r21
 6fa:	97 fb       	bst	r25, 7
 6fc:	1e f4       	brtc	.+6      	; 0x704 <__divmodsi4+0xc>
 6fe:	00 94       	com	r0
 700:	0e 94 93 03 	call	0x726	; 0x726 <__negsi2>
 704:	57 fd       	sbrc	r21, 7
 706:	07 d0       	rcall	.+14     	; 0x716 <__divmodsi4_neg2>
 708:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodsi4>
 70c:	07 fc       	sbrc	r0, 7
 70e:	03 d0       	rcall	.+6      	; 0x716 <__divmodsi4_neg2>
 710:	4e f4       	brtc	.+18     	; 0x724 <__divmodsi4_exit>
 712:	0c 94 93 03 	jmp	0x726	; 0x726 <__negsi2>

00000716 <__divmodsi4_neg2>:
 716:	50 95       	com	r21
 718:	40 95       	com	r20
 71a:	30 95       	com	r19
 71c:	21 95       	neg	r18
 71e:	3f 4f       	sbci	r19, 0xFF	; 255
 720:	4f 4f       	sbci	r20, 0xFF	; 255
 722:	5f 4f       	sbci	r21, 0xFF	; 255

00000724 <__divmodsi4_exit>:
 724:	08 95       	ret

00000726 <__negsi2>:
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <setjmp>:
 736:	dc 01       	movw	r26, r24
 738:	2d 92       	st	X+, r2
 73a:	3d 92       	st	X+, r3
 73c:	4d 92       	st	X+, r4
 73e:	5d 92       	st	X+, r5
 740:	6d 92       	st	X+, r6
 742:	7d 92       	st	X+, r7
 744:	8d 92       	st	X+, r8
 746:	9d 92       	st	X+, r9
 748:	ad 92       	st	X+, r10
 74a:	bd 92       	st	X+, r11
 74c:	cd 92       	st	X+, r12
 74e:	dd 92       	st	X+, r13
 750:	ed 92       	st	X+, r14
 752:	fd 92       	st	X+, r15
 754:	0d 93       	st	X+, r16
 756:	1d 93       	st	X+, r17
 758:	cd 93       	st	X+, r28
 75a:	dd 93       	st	X+, r29
 75c:	ff 91       	pop	r31
 75e:	ef 91       	pop	r30
 760:	8d b7       	in	r24, 0x3d	; 61
 762:	8d 93       	st	X+, r24
 764:	8e b7       	in	r24, 0x3e	; 62
 766:	8d 93       	st	X+, r24
 768:	8f b7       	in	r24, 0x3f	; 63
 76a:	8d 93       	st	X+, r24
 76c:	ed 93       	st	X+, r30
 76e:	fd 93       	st	X+, r31
 770:	88 27       	eor	r24, r24
 772:	99 27       	eor	r25, r25
 774:	09 94       	ijmp

00000776 <longjmp>:
 776:	dc 01       	movw	r26, r24
 778:	cb 01       	movw	r24, r22
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	91 05       	cpc	r25, r1
 77e:	81 1d       	adc	r24, r1
 780:	2d 90       	ld	r2, X+
 782:	3d 90       	ld	r3, X+
 784:	4d 90       	ld	r4, X+
 786:	5d 90       	ld	r5, X+
 788:	6d 90       	ld	r6, X+
 78a:	7d 90       	ld	r7, X+
 78c:	8d 90       	ld	r8, X+
 78e:	9d 90       	ld	r9, X+
 790:	ad 90       	ld	r10, X+
 792:	bd 90       	ld	r11, X+
 794:	cd 90       	ld	r12, X+
 796:	dd 90       	ld	r13, X+
 798:	ed 90       	ld	r14, X+
 79a:	fd 90       	ld	r15, X+
 79c:	0d 91       	ld	r16, X+
 79e:	1d 91       	ld	r17, X+
 7a0:	cd 91       	ld	r28, X+
 7a2:	dd 91       	ld	r29, X+
 7a4:	ed 91       	ld	r30, X+
 7a6:	fd 91       	ld	r31, X+
 7a8:	0d 90       	ld	r0, X+
 7aa:	f8 94       	cli
 7ac:	fe bf       	out	0x3e, r31	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	ed bf       	out	0x3d, r30	; 61
 7b2:	ed 91       	ld	r30, X+
 7b4:	fd 91       	ld	r31, X+
 7b6:	09 94       	ijmp

000007b8 <_exit>:
 7b8:	f8 94       	cli

000007ba <__stop_program>:
 7ba:	ff cf       	rjmp	.-2      	; 0x7ba <__stop_program>
