
Alternative 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800104  00800104  000007b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012aa  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aea  00000000  00000000  00001b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071c  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00002d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cb  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df5  00000000  00000000  000035f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e2       	ldi	r30, 0x20	; 32
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 32       	cpi	r26, 0x2B	; 43
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 3b 02 	call	0x476	; 0x476 <main>
  92:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
		}
	}
}

void blink() {
	LCDDR3 = LCDDR3 ^ 0b00000001;
  9a:	ef ee       	ldi	r30, 0xEF	; 239
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <init_lcd>:

uint16_t clicks = 0;

void init_lcd() {
	// LCD Enable (LCDEN) & Low Power Waveform (LCDAB)
	LCDCRA = (1<<LCDEN) | (1<<LCDAB) | (0<<LCDIF) | (0<<LCDIE) | (0<<LCDBL);
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	// external asynchronous clock source (LCDCS), 1/3 bias (LCD2B), 1/4 duty (LCDMUX1:0), 25 segments enabled (LCDPM2:0)
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  ae:	87 eb       	ldi	r24, 0xB7	; 183
  b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// prescaler setting N=16 (LCDPS2:0), clock divider setting D=8 (LCDCD2:0)
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	// drive time 300 microseconds (LCDDC2:0), contrast control voltage 3.35 V (LCDCC3:0)
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  c0:	08 95       	ret

000000c2 <init_button>:

}

void init_button() {
	PORTB = (1<<PB7);
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	85 b9       	out	0x05, r24	; 5
	// Pin Change Enable Mask (PCINT15)
	PCMSK1 = (1<<PCINT15);
  c6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1);
  ca:	8d bb       	out	0x1d, r24	; 29
  cc:	08 95       	ret

000000ce <init_timer>:
}

void init_timer() {
	// Timer 1 with 1024 prescaler with CTC (WGM13, WGM12)
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 * 7812,5 / 1000 * 50 = 390,625
	 * 391 = 50 ms
	 * 391 = 0b110000111
	 */
	// Set Timer1 Output Compare A
	TIMSK1 = (1<<OCIE1A);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// Set Output Compare Register 1 A to 391 in binary
	//OCR1A = 0b110000111;

	// Blink 1 Hz
	OCR1A = 7812;
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	9e e1       	ldi	r25, 0x1E	; 30
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Start the timer on value 0
	TCNT1 = 0;
  e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ee:	08 95       	ret

000000f0 <digitLookUp>:
}

uint16_t digitLookUp(uint8_t c) {
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	64 97       	sbiw	r28, 0x14	; 20
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61

	if(c < 48 || c > 57) {
 104:	90 ed       	ldi	r25, 0xD0	; 208
 106:	98 0f       	add	r25, r24
 108:	9a 30       	cpi	r25, 0x0A	; 10
 10a:	90 f5       	brcc	.+100    	; 0x170 <digitLookUp+0x80>
		return 0;
	}

	uint16_t binary[10];

	binary[0] = 0b0001010101010001; // 0
 10c:	21 e5       	ldi	r18, 0x51	; 81
 10e:	35 e1       	ldi	r19, 0x15	; 21
 110:	3a 83       	std	Y+2, r19	; 0x02
 112:	29 83       	std	Y+1, r18	; 0x01
	binary[1] = 0b0000000100010000; // 1
 114:	20 e1       	ldi	r18, 0x10	; 16
 116:	31 e0       	ldi	r19, 0x01	; 1
 118:	3c 83       	std	Y+4, r19	; 0x04
 11a:	2b 83       	std	Y+3, r18	; 0x03
	binary[2] = 0b0001000111100001; // 2
 11c:	21 ee       	ldi	r18, 0xE1	; 225
 11e:	31 e1       	ldi	r19, 0x11	; 17
 120:	3e 83       	std	Y+6, r19	; 0x06
 122:	2d 83       	std	Y+5, r18	; 0x05
	binary[3] = 0b0001000110110001; // 3
 124:	21 eb       	ldi	r18, 0xB1	; 177
 126:	31 e1       	ldi	r19, 0x11	; 17
 128:	38 87       	std	Y+8, r19	; 0x08
 12a:	2f 83       	std	Y+7, r18	; 0x07
	binary[4] = 0b0000010110110000; // 4
 12c:	20 eb       	ldi	r18, 0xB0	; 176
 12e:	35 e0       	ldi	r19, 0x05	; 5
 130:	3a 87       	std	Y+10, r19	; 0x0a
 132:	29 87       	std	Y+9, r18	; 0x09
	binary[5] = 0b0001010010110001; // 5
 134:	21 eb       	ldi	r18, 0xB1	; 177
 136:	34 e1       	ldi	r19, 0x14	; 20
 138:	3c 87       	std	Y+12, r19	; 0x0c
 13a:	2b 87       	std	Y+11, r18	; 0x0b
	binary[6] = 0b0001010011110001; // 6
 13c:	21 ef       	ldi	r18, 0xF1	; 241
 13e:	34 e1       	ldi	r19, 0x14	; 20
 140:	3e 87       	std	Y+14, r19	; 0x0e
 142:	2d 87       	std	Y+13, r18	; 0x0d
	binary[7] = 0b0001000100010000; // 7
 144:	20 e1       	ldi	r18, 0x10	; 16
 146:	31 e1       	ldi	r19, 0x11	; 17
 148:	38 8b       	std	Y+16, r19	; 0x10
 14a:	2f 87       	std	Y+15, r18	; 0x0f
	binary[8] = 0b0001010111110001; // 8
 14c:	21 ef       	ldi	r18, 0xF1	; 241
 14e:	35 e1       	ldi	r19, 0x15	; 21
 150:	3a 8b       	std	Y+18, r19	; 0x12
 152:	29 8b       	std	Y+17, r18	; 0x11
	binary[9] = 0b0001010110110000; // 9
 154:	20 eb       	ldi	r18, 0xB0	; 176
 156:	35 e1       	ldi	r19, 0x15	; 21
 158:	3c 8b       	std	Y+20, r19	; 0x14
 15a:	2b 8b       	std	Y+19, r18	; 0x13
	binary[10] = '\0';

	return binary[(c - 48)];
 15c:	e8 2f       	mov	r30, r24
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	f0 97       	sbiw	r30, 0x30	; 48
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ec 0f       	add	r30, r28
 168:	fd 1f       	adc	r31, r29
 16a:	81 81       	ldd	r24, Z+1	; 0x01
 16c:	92 81       	ldd	r25, Z+2	; 0x02
 16e:	02 c0       	rjmp	.+4      	; 0x174 <digitLookUp+0x84>
}

uint16_t digitLookUp(uint8_t c) {

	if(c < 48 || c > 57) {
		return 0;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
	binary[8] = 0b0001010111110001; // 8
	binary[9] = 0b0001010110110000; // 9
	binary[10] = '\0';

	return binary[(c - 48)];
}
 174:	64 96       	adiw	r28, 0x14	; 20
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <writeChar>:

void writeChar(char ch, int pos) {
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	eb 01       	movw	r28, r22
	// If pos is less than zero or greater than 5, do nothing
	if(pos < 0 || pos > 5) {
 18c:	66 30       	cpi	r22, 0x06	; 6
 18e:	71 05       	cpc	r23, r1
 190:	d8 f5       	brcc	.+118    	; 0x208 <writeChar+0x82>

	uint16_t digitBinary = 0;
	uint8_t nibble_0 = 0, nibble_1 = 0, nibble_2 = 0, nibble_3 = 0, oldValue = 0, mask = 0, increment = 0;

	// Fetch the value needed to display number "ch" in LCDDRx
	digitBinary = digitLookUp(ch);
 192:	0e 94 78 00 	call	0xf0	; 0xf0 <digitLookUp>

	// Bitshift 1 bit to get valid values for incrementing the pointer
	increment = pos >> 1;
 196:	fe 01       	movw	r30, r28
 198:	f5 95       	asr	r31
 19a:	e7 95       	ror	r30

	// Depending on if the value of pos is even or odd we adjust the nibbles
	// and mask correctly
	if((pos % 2) == 0) {
 19c:	c0 fd       	sbrc	r28, 0
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <writeChar+0x3c>
		nibble_0 = 0b00001111 & (digitBinary >> 12);
 1a0:	59 2f       	mov	r21, r25
 1a2:	52 95       	swap	r21
 1a4:	5f 70       	andi	r21, 0x0F	; 15
		nibble_1 = 0b00001111 & (digitBinary >> 8);
 1a6:	49 2f       	mov	r20, r25
 1a8:	4f 70       	andi	r20, 0x0F	; 15
		nibble_2 = 0b00001111 & (digitBinary >> 4);
 1aa:	9c 01       	movw	r18, r24
 1ac:	32 95       	swap	r19
 1ae:	22 95       	swap	r18
 1b0:	2f 70       	andi	r18, 0x0F	; 15
 1b2:	23 27       	eor	r18, r19
 1b4:	3f 70       	andi	r19, 0x0F	; 15
 1b6:	23 27       	eor	r18, r19
 1b8:	32 2f       	mov	r19, r18
 1ba:	3f 70       	andi	r19, 0x0F	; 15
		nibble_3 = 0b00001111 & digitBinary;
 1bc:	8f 70       	andi	r24, 0x0F	; 15
		// This mask is needed to preserve what is on the right side of
		// LCDDRx
		mask = 0b11110000;
 1be:	90 ef       	ldi	r25, 0xF0	; 240
 1c0:	10 c0       	rjmp	.+32     	; 0x1e2 <writeChar+0x5c>
		} else {
		nibble_0 = 0b11110000 & (digitBinary >> 8);
 1c2:	59 2f       	mov	r21, r25
 1c4:	50 7f       	andi	r21, 0xF0	; 240
		nibble_1 = 0b11110000 & (digitBinary >> 4);
 1c6:	9c 01       	movw	r18, r24
 1c8:	32 95       	swap	r19
 1ca:	22 95       	swap	r18
 1cc:	2f 70       	andi	r18, 0x0F	; 15
 1ce:	23 27       	eor	r18, r19
 1d0:	3f 70       	andi	r19, 0x0F	; 15
 1d2:	23 27       	eor	r18, r19
 1d4:	42 2f       	mov	r20, r18
 1d6:	40 7f       	andi	r20, 0xF0	; 240
		nibble_2 = 0b11110000 & digitBinary;
 1d8:	38 2f       	mov	r19, r24
 1da:	30 7f       	andi	r19, 0xF0	; 240
		nibble_3 = 0b11110000 & (digitBinary << 4);
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
		// Mask needed to preserve what is on the left side of LCDDRx
		mask = 0b00001111;
 1e0:	9f e0       	ldi	r25, 0x0F	; 15
 1e2:	ff 27       	eor	r31, r31
	// Create a pointer and assign the memory address of LCDDR0
	// (is volatile really needed?)
	volatile uint8_t *LCDDRAddress = &LCDDR0;
	// Increment the pointers memory address with the value calculated earlier
	// This is needed to be able to use LCDDR0+x, LCDDR1+x, LCDDR2+x etc.
	LCDDRAddress = (LCDDRAddress + increment);
 1e4:	e4 51       	subi	r30, 0x14	; 20
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
	// Preserve the old value by using a mask
	oldValue = mask & *LCDDRAddress;
 1e8:	20 81       	ld	r18, Z
 1ea:	29 23       	and	r18, r25
	// Add the nibble using OR
	*LCDDRAddress = oldValue | nibble_0;
 1ec:	25 2b       	or	r18, r21
 1ee:	20 83       	st	Z, r18
	// Increase the memory address of the pointer with 5 to be able to
	// use LCDDRx+5
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1f0:	25 81       	ldd	r18, Z+5	; 0x05
 1f2:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_1;
 1f4:	24 2b       	or	r18, r20
 1f6:	25 83       	std	Z+5, r18	; 0x05
	// Increase with 5 to be able to use LCDDRx+10
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1f8:	22 85       	ldd	r18, Z+10	; 0x0a
 1fa:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_2;
 1fc:	23 2b       	or	r18, r19
 1fe:	22 87       	std	Z+10, r18	; 0x0a
	// Increase with 5 to be able to use LCDDRx+15
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 200:	27 85       	ldd	r18, Z+15	; 0x0f
 202:	92 23       	and	r25, r18
	*LCDDRAddress = oldValue | nibble_3;
 204:	89 2b       	or	r24, r25
 206:	87 87       	std	Z+15, r24	; 0x0f

}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <is_prime>:

bool is_prime(long i) {
 20e:	4f 92       	push	r4
 210:	5f 92       	push	r5
 212:	6f 92       	push	r6
 214:	7f 92       	push	r7
 216:	8f 92       	push	r8
 218:	9f 92       	push	r9
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 22e:	2b 01       	movw	r4, r22
 230:	3c 01       	movw	r6, r24
 232:	99 23       	and	r25, r25
 234:	2c f4       	brge	.+10     	; 0x240 <is_prime+0x32>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	42 1a       	sub	r4, r18
 23a:	52 0a       	sbc	r5, r18
 23c:	62 0a       	sbc	r6, r18
 23e:	72 0a       	sbc	r7, r18
 240:	75 94       	asr	r7
 242:	67 94       	ror	r6
 244:	57 94       	ror	r5
 246:	47 94       	ror	r4
 248:	53 01       	movw	r10, r6
 24a:	42 01       	movw	r8, r4
 24c:	22 e0       	ldi	r18, 0x02	; 2
 24e:	42 16       	cp	r4, r18
 250:	51 04       	cpc	r5, r1
 252:	61 04       	cpc	r6, r1
 254:	71 04       	cpc	r7, r1
 256:	18 f1       	brcs	.+70     	; 0x29e <is_prime+0x90>
		if(i%c == 0) {
 258:	c6 2f       	mov	r28, r22
 25a:	d7 2f       	mov	r29, r23
 25c:	18 2f       	mov	r17, r24
 25e:	09 2f       	mov	r16, r25
 260:	60 ff       	sbrs	r22, 0
 262:	2f c0       	rjmp	.+94     	; 0x2c2 <is_prime+0xb4>
 264:	c1 2c       	mov	r12, r1
 266:	d1 2c       	mov	r13, r1
 268:	76 01       	movw	r14, r12
 26a:	68 94       	set
 26c:	c1 f8       	bld	r12, 1
 26e:	0c c0       	rjmp	.+24     	; 0x288 <is_prime+0x7a>
 270:	6c 2f       	mov	r22, r28
 272:	7d 2f       	mov	r23, r29
 274:	81 2f       	mov	r24, r17
 276:	90 2f       	mov	r25, r16
 278:	a7 01       	movw	r20, r14
 27a:	96 01       	movw	r18, r12
 27c:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodsi4>
 280:	67 2b       	or	r22, r23
 282:	68 2b       	or	r22, r24
 284:	69 2b       	or	r22, r25
 286:	f9 f0       	breq	.+62     	; 0x2c6 <is_prime+0xb8>
}

bool is_prime(long i) {
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	c8 1a       	sub	r12, r24
 28c:	d8 0a       	sbc	r13, r24
 28e:	e8 0a       	sbc	r14, r24
 290:	f8 0a       	sbc	r15, r24
 292:	8c 14       	cp	r8, r12
 294:	9d 04       	cpc	r9, r13
 296:	ae 04       	cpc	r10, r14
 298:	bf 04       	cpc	r11, r15
 29a:	50 f7       	brcc	.-44     	; 0x270 <is_prime+0x62>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <is_prime+0x9a>
 29e:	c1 2c       	mov	r12, r1
 2a0:	d1 2c       	mov	r13, r1
 2a2:	76 01       	movw	r14, r12
 2a4:	68 94       	set
 2a6:	c1 f8       	bld	r12, 1
			// Return false as the value of i is not a prime number
			return false;
		}
	}

	if(c == i/2 + 1) {
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	42 1a       	sub	r4, r18
 2ac:	52 0a       	sbc	r5, r18
 2ae:	62 0a       	sbc	r6, r18
 2b0:	72 0a       	sbc	r7, r18
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	c4 14       	cp	r12, r4
 2b6:	d5 04       	cpc	r13, r5
 2b8:	e6 04       	cpc	r14, r6
 2ba:	f7 04       	cpc	r15, r7
 2bc:	29 f0       	breq	.+10     	; 0x2c8 <is_prime+0xba>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <is_prime+0xba>
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
		if(i%c == 0) {
			// Return false as the value of i is not a prime number
			return false;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <is_prime+0xba>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
		// Return true as "i" is a prime number
		return true;
	}

	return false;
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	df 90       	pop	r13
 2d6:	cf 90       	pop	r12
 2d8:	bf 90       	pop	r11
 2da:	af 90       	pop	r10
 2dc:	9f 90       	pop	r9
 2de:	8f 90       	pop	r8
 2e0:	7f 90       	pop	r7
 2e2:	6f 90       	pop	r6
 2e4:	5f 90       	pop	r5
 2e6:	4f 90       	pop	r4
 2e8:	08 95       	ret

000002ea <printAt>:

void printAt(long num, int pos) {
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <printAt+0x12>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	6b 01       	movw	r12, r22
 302:	7c 01       	movw	r14, r24
 304:	8a 01       	movw	r16, r20
	// Use the global variable pp to test mutex
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 306:	24 e6       	ldi	r18, 0x64	; 100
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodsi4>
 312:	2a e0       	ldi	r18, 0x0A	; 10
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodsi4>
 31e:	b8 01       	movw	r22, r16
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	82 0f       	add	r24, r18
 324:	0e 94 c3 00 	call	0x186	; 0x186 <writeChar>
	for(volatile int i = 0; i < 1000; i++) {}
 328:	1a 82       	std	Y+2, r1	; 0x02
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	88 3e       	cpi	r24, 0xE8	; 232
 332:	93 40       	sbci	r25, 0x03	; 3
 334:	54 f4       	brge	.+20     	; 0x34a <printAt+0x60>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	9a 81       	ldd	r25, Y+2	; 0x02
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 81       	ldd	r25, Y+2	; 0x02
 344:	88 3e       	cpi	r24, 0xE8	; 232
 346:	93 40       	sbci	r25, 0x03	; 3
 348:	b4 f3       	brlt	.-20     	; 0x336 <printAt+0x4c>
	pp++;
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
	writeChar( num % 10 + '0', pp);
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	2a e0       	ldi	r18, 0x0A	; 10
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodsi4>
 35e:	86 2f       	mov	r24, r22
 360:	b8 01       	movw	r22, r16
 362:	80 5d       	subi	r24, 0xD0	; 208
 364:	0e 94 c3 00 	call	0x186	; 0x186 <writeChar>
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	08 95       	ret

0000037e <button>:
void blink() {
	LCDDR3 = LCDDR3 ^ 0b00000001;
}

void button() {
	printAt(clicks, 3);
 37e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 382:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	43 e0       	ldi	r20, 0x03	; 3
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	0e 94 75 01 	call	0x2ea	; 0x2ea <printAt>
	clicks++;
 392:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 396:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 3a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3a4:	08 95       	ret

000003a6 <computePrimes>:
	for(volatile int i = 0; i < 1000; i++) {}
	pp++;
	writeChar( num % 10 + '0', pp);
}

void computePrimes(int pos) {
 3a6:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 3a8:	c1 2c       	mov	r12, r1
 3aa:	d1 2c       	mov	r13, r1
 3ac:	76 01       	movw	r14, r12
 3ae:	c3 94       	inc	r12
		if (is_prime(n)) {
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	0e 94 07 01 	call	0x20e	; 0x20e <is_prime>
 3b8:	88 23       	and	r24, r24
 3ba:	29 f0       	breq	.+10     	; 0x3c6 <computePrimes+0x20>
			printAt(n, pos);
 3bc:	ae 01       	movw	r20, r28
 3be:	c7 01       	movw	r24, r14
 3c0:	b6 01       	movw	r22, r12
 3c2:	0e 94 75 01 	call	0x2ea	; 0x2ea <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	c8 1a       	sub	r12, r24
 3ca:	d8 0a       	sbc	r13, r24
 3cc:	e8 0a       	sbc	r14, r24
 3ce:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 3d0:	ef cf       	rjmp	.-34     	; 0x3b0 <computePrimes+0xa>

000003d2 <__vector_3>:
	printAt(clicks, 3);
	clicks++;
}

// Unlock button mutex when interrupt occurs
ISR(PCINT1_vect) {
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
	if((PINB >> 7) == 0) {
 3f4:	1f 99       	sbic	0x03, 7	; 3
 3f6:	06 c0       	rjmp	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		spawn(button, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	8f eb       	ldi	r24, 0xBF	; 191
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 76 02 	call	0x4ec	; 0x4ec <spawn>
	}
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_7>:

// Unlock Blink mutex when interrupt occurs
ISR(TIMER1_COMPA_vect) {
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	spawn(blink, 0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8d e4       	ldi	r24, 0x4D	; 77
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 76 02 	call	0x4ec	; 0x4ec <spawn>
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <main>:

int main() {
	// Setup the clockspeed
	CLKPR  = 0x80;
 476:	e1 e6       	ldi	r30, 0x61	; 97
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 e8       	ldi	r24, 0x80	; 128
 47c:	80 83       	st	Z, r24
	CLKPR  = 0x00;
 47e:	10 82       	st	Z, r1
	init_lcd();
 480:	0e 94 54 00 	call	0xa8	; 0xa8 <init_lcd>
	init_button();
 484:	0e 94 61 00 	call	0xc2	; 0xc2 <init_button>
	init_timer();
 488:	0e 94 67 00 	call	0xce	; 0xce <init_timer>

	spawn(button, 0);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	8f eb       	ldi	r24, 0xBF	; 191
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 76 02 	call	0x4ec	; 0x4ec <spawn>
	spawn(blink, 0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	8d e4       	ldi	r24, 0x4D	; 77
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 76 02 	call	0x4ec	; 0x4ec <spawn>
	computePrimes(0);
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <computePrimes>

000004ac <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <dispatch+0x6>
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	9a 83       	std	Y+2, r25	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 4ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4c2:	06 96       	adiw	r24, 0x06	; 6
 4c4:	0e 94 4d 03 	call	0x69a	; 0x69a <setjmp>
 4c8:	89 2b       	or	r24, r25
 4ca:	59 f4       	brne	.+22     	; 0x4e2 <dispatch+0x36>
        current = next;
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	9a 81       	ldd	r25, Y+2	; 0x02
 4d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	06 96       	adiw	r24, 0x06	; 6
 4de:	0e 94 6d 03 	call	0x6da	; 0x6da <longjmp>
    }
}
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <spawn>:

void spawn(void (* function)(int), int arg) {
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <spawn+0x6>
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 4f6:	f8 94       	cli
    if (!initialized) initialize();
 4f8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <initialized>
 4fc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <initialized+0x1>
 500:	23 2b       	or	r18, r19
 502:	e1 f4       	brne	.+56     	; 0x53c <__stack+0x3d>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 504:	24 ee       	ldi	r18, 0xE4	; 228
 506:	31 e0       	ldi	r19, 0x01	; 1
 508:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <threads+0x5>
 50c:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <threads+0x4>
 510:	21 e5       	ldi	r18, 0x51	; 81
 512:	32 e0       	ldi	r19, 0x02	; 2
 514:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <threads+0x72>
 518:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <threads+0x71>
 51c:	2e eb       	ldi	r18, 0xBE	; 190
 51e:	32 e0       	ldi	r19, 0x02	; 2
 520:	30 93 56 02 	sts	0x0256, r19	; 0x800256 <threads+0xdf>
 524:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 528:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <threads+0x14c>
 52c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <threads+0x14b>

    initialized = 1;
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <initialized+0x1>
 538:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <initialized>
    }
	*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 53c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 540:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 544:	3a 83       	std	Y+2, r19	; 0x02
 546:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 548:	23 2b       	or	r18, r19
 54a:	a9 f0       	breq	.+42     	; 0x576 <__stack+0x77>
        *queue = (*queue)->next;
 54c:	e9 81       	ldd	r30, Y+1	; 0x01
 54e:	fa 81       	ldd	r31, Y+2	; 0x02
 550:	44 81       	ldd	r20, Z+4	; 0x04
 552:	55 81       	ldd	r21, Z+5	; 0x05
 554:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 558:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 55c:	91 83       	std	Z+1, r25	; 0x01
 55e:	80 83       	st	Z, r24
    newp->arg = arg;
 560:	73 83       	std	Z+3, r23	; 0x03
 562:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 564:	15 82       	std	Z+5, r1	; 0x05
 566:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 568:	cf 01       	movw	r24, r30
 56a:	06 96       	adiw	r24, 0x06	; 6
 56c:	0e 94 4d 03 	call	0x69a	; 0x69a <setjmp>
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	79 f5       	brne	.+94     	; 0x5d2 <__stack+0xd3>
 574:	01 c0       	rjmp	.+2      	; 0x578 <__stack+0x79>
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stack+0x77>
        ENABLE();
 578:	78 94       	sei
        current->function(current->arg);
 57a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 57e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 582:	ed 91       	ld	r30, X+
 584:	fc 91       	ld	r31, X
 586:	11 97       	sbiw	r26, 0x01	; 1
 588:	12 96       	adiw	r26, 0x02	; 2
 58a:	8d 91       	ld	r24, X+
 58c:	9c 91       	ld	r25, X
 58e:	13 97       	sbiw	r26, 0x03	; 3
 590:	09 95       	icall
        DISABLE();
 592:	f8 94       	cli
        enqueue(current, &freeQ);
 594:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 598:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {

	thread q = *queue;
 59c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 5a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
	*queue = p;
 5a4:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 5a8:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
	p->next = q;
 5ac:	95 83       	std	Z+5, r25	; 0x05
 5ae:	84 83       	std	Z+4, r24	; 0x04
    }
	*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <readyQ>
 5b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <readyQ+0x1>
    if (*queue) {
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	51 f0       	breq	.+20     	; 0x5d0 <__stack+0xd1>
        *queue = (*queue)->next;
 5bc:	fc 01       	movw	r30, r24
 5be:	24 81       	ldd	r18, Z+4	; 0x04
 5c0:	35 81       	ldd	r19, Z+5	; 0x05
 5c2:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <readyQ+0x1>
 5c6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 5ca:	0e 94 56 02 	call	0x4ac	; 0x4ac <dispatch>
 5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <__stack+0xd3>
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stack+0xd1>
    }
    SETSTACK(&newp->context, &newp->stack);
 5d2:	e9 81       	ldd	r30, Y+1	; 0x01
 5d4:	fa 81       	ldd	r31, Y+2	; 0x02
 5d6:	36 96       	adiw	r30, 0x06	; 6
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	87 59       	subi	r24, 0x97	; 151
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	91 8b       	std	Z+17, r25	; 0x11
 5e2:	80 8b       	std	Z+16, r24	; 0x10
 5e4:	93 8b       	std	Z+19, r25	; 0x13
 5e6:	82 8b       	std	Z+18, r24	; 0x12
	
    // Enqueue the current thread
    enqueue(current, &readyQ);
 5e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 5ec:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {

	thread q = *queue;
 5f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <readyQ>
 5f4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <readyQ+0x1>
	*queue = p;
 5f8:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <readyQ+0x1>
 5fc:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <readyQ>
	p->next = q;
 600:	95 83       	std	Z+5, r25	; 0x05
 602:	84 83       	std	Z+4, r24	; 0x04
    SETSTACK(&newp->context, &newp->stack);
	
    // Enqueue the current thread
    enqueue(current, &readyQ);
    // Start the newly created thread
    dispatch(newp);
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	9a 81       	ldd	r25, Y+2	; 0x02
 608:	0e 94 56 02 	call	0x4ac	; 0x4ac <dispatch>

    ENABLE();
 60c:	78 94       	sei
}
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <__udivmodsi4>:
 618:	a1 e2       	ldi	r26, 0x21	; 33
 61a:	1a 2e       	mov	r1, r26
 61c:	aa 1b       	sub	r26, r26
 61e:	bb 1b       	sub	r27, r27
 620:	fd 01       	movw	r30, r26
 622:	0d c0       	rjmp	.+26     	; 0x63e <__udivmodsi4_ep>

00000624 <__udivmodsi4_loop>:
 624:	aa 1f       	adc	r26, r26
 626:	bb 1f       	adc	r27, r27
 628:	ee 1f       	adc	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	a2 17       	cp	r26, r18
 62e:	b3 07       	cpc	r27, r19
 630:	e4 07       	cpc	r30, r20
 632:	f5 07       	cpc	r31, r21
 634:	20 f0       	brcs	.+8      	; 0x63e <__udivmodsi4_ep>
 636:	a2 1b       	sub	r26, r18
 638:	b3 0b       	sbc	r27, r19
 63a:	e4 0b       	sbc	r30, r20
 63c:	f5 0b       	sbc	r31, r21

0000063e <__udivmodsi4_ep>:
 63e:	66 1f       	adc	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	1a 94       	dec	r1
 648:	69 f7       	brne	.-38     	; 0x624 <__udivmodsi4_loop>
 64a:	60 95       	com	r22
 64c:	70 95       	com	r23
 64e:	80 95       	com	r24
 650:	90 95       	com	r25
 652:	9b 01       	movw	r18, r22
 654:	ac 01       	movw	r20, r24
 656:	bd 01       	movw	r22, r26
 658:	cf 01       	movw	r24, r30
 65a:	08 95       	ret

0000065c <__divmodsi4>:
 65c:	05 2e       	mov	r0, r21
 65e:	97 fb       	bst	r25, 7
 660:	1e f4       	brtc	.+6      	; 0x668 <__divmodsi4+0xc>
 662:	00 94       	com	r0
 664:	0e 94 45 03 	call	0x68a	; 0x68a <__negsi2>
 668:	57 fd       	sbrc	r21, 7
 66a:	07 d0       	rcall	.+14     	; 0x67a <__divmodsi4_neg2>
 66c:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodsi4>
 670:	07 fc       	sbrc	r0, 7
 672:	03 d0       	rcall	.+6      	; 0x67a <__divmodsi4_neg2>
 674:	4e f4       	brtc	.+18     	; 0x688 <__divmodsi4_exit>
 676:	0c 94 45 03 	jmp	0x68a	; 0x68a <__negsi2>

0000067a <__divmodsi4_neg2>:
 67a:	50 95       	com	r21
 67c:	40 95       	com	r20
 67e:	30 95       	com	r19
 680:	21 95       	neg	r18
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	4f 4f       	sbci	r20, 0xFF	; 255
 686:	5f 4f       	sbci	r21, 0xFF	; 255

00000688 <__divmodsi4_exit>:
 688:	08 95       	ret

0000068a <__negsi2>:
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <setjmp>:
 69a:	dc 01       	movw	r26, r24
 69c:	2d 92       	st	X+, r2
 69e:	3d 92       	st	X+, r3
 6a0:	4d 92       	st	X+, r4
 6a2:	5d 92       	st	X+, r5
 6a4:	6d 92       	st	X+, r6
 6a6:	7d 92       	st	X+, r7
 6a8:	8d 92       	st	X+, r8
 6aa:	9d 92       	st	X+, r9
 6ac:	ad 92       	st	X+, r10
 6ae:	bd 92       	st	X+, r11
 6b0:	cd 92       	st	X+, r12
 6b2:	dd 92       	st	X+, r13
 6b4:	ed 92       	st	X+, r14
 6b6:	fd 92       	st	X+, r15
 6b8:	0d 93       	st	X+, r16
 6ba:	1d 93       	st	X+, r17
 6bc:	cd 93       	st	X+, r28
 6be:	dd 93       	st	X+, r29
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	8d b7       	in	r24, 0x3d	; 61
 6c6:	8d 93       	st	X+, r24
 6c8:	8e b7       	in	r24, 0x3e	; 62
 6ca:	8d 93       	st	X+, r24
 6cc:	8f b7       	in	r24, 0x3f	; 63
 6ce:	8d 93       	st	X+, r24
 6d0:	ed 93       	st	X+, r30
 6d2:	fd 93       	st	X+, r31
 6d4:	88 27       	eor	r24, r24
 6d6:	99 27       	eor	r25, r25
 6d8:	09 94       	ijmp

000006da <longjmp>:
 6da:	dc 01       	movw	r26, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	91 05       	cpc	r25, r1
 6e2:	81 1d       	adc	r24, r1
 6e4:	2d 90       	ld	r2, X+
 6e6:	3d 90       	ld	r3, X+
 6e8:	4d 90       	ld	r4, X+
 6ea:	5d 90       	ld	r5, X+
 6ec:	6d 90       	ld	r6, X+
 6ee:	7d 90       	ld	r7, X+
 6f0:	8d 90       	ld	r8, X+
 6f2:	9d 90       	ld	r9, X+
 6f4:	ad 90       	ld	r10, X+
 6f6:	bd 90       	ld	r11, X+
 6f8:	cd 90       	ld	r12, X+
 6fa:	dd 90       	ld	r13, X+
 6fc:	ed 90       	ld	r14, X+
 6fe:	fd 90       	ld	r15, X+
 700:	0d 91       	ld	r16, X+
 702:	1d 91       	ld	r17, X+
 704:	cd 91       	ld	r28, X+
 706:	dd 91       	ld	r29, X+
 708:	ed 91       	ld	r30, X+
 70a:	fd 91       	ld	r31, X+
 70c:	0d 90       	ld	r0, X+
 70e:	f8 94       	cli
 710:	fe bf       	out	0x3e, r31	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	ed bf       	out	0x3d, r30	; 61
 716:	ed 91       	ld	r30, X+
 718:	fd 91       	ld	r31, X+
 71a:	09 94       	ijmp

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
